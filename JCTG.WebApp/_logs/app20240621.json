{"@t":"2024-06-21T11:59:33.3158473Z","@mt":"True MSAL 4.61.3.0 MSAL.NetCore .NET 8.0.5 Microsoft Windows 10.0.22631 [2024-06-21 11:59:33Z - b2660a9c-0730-464a-b4ec-f4bba04127ff] Only in-memory caching is used. The cache is not persisted and will be lost if the machine is restarted. It also does not scale for a web app or web API, where the number of users can grow large. In production, web apps and web APIs should use distributed caching like Redis. See https://aka.ms/msal-net-cca-token-cache-serialization","@l":"Warning","@tr":"623974f4d00e6d1eba611d214ac43a7e","@sp":"9de740eb74bc1d6c","SourceContext":"Microsoft.Identity.Web.TokenAcquisition","RequestId":"0HN4HT6BLDT4C:00000001","RequestPath":"/signin-oidc","ConnectionId":"0HN4HT6BLDT4C","ApplicationName":"Trade Hubbing","Environment":"Production"}
{"@t":"2024-06-21T12:01:30.5883805Z","@mt":"True MSAL 4.61.3.0 MSAL.NetCore .NET 8.0.5 Microsoft Windows 10.0.22631 [2024-06-21 12:01:30Z - bee80c60-57c9-4090-893c-40e2b0f536eb] Only in-memory caching is used. The cache is not persisted and will be lost if the machine is restarted. It also does not scale for a web app or web API, where the number of users can grow large. In production, web apps and web APIs should use distributed caching like Redis. See https://aka.ms/msal-net-cca-token-cache-serialization","@l":"Warning","@tr":"99544ecfa2c03cb023987cb36a3a7cc9","@sp":"002fc3bf0f111cf4","SourceContext":"Microsoft.Identity.Web.TokenAcquisition","RequestId":"0HN4HT7CUJUI6:00000001","RequestPath":"/signin-oidc","ConnectionId":"0HN4HT7CUJUI6","ApplicationName":"Trade Hubbing","Environment":"Production"}
{"@t":"2024-06-21T13:21:35.7342843Z","@mt":"True MSAL 4.61.3.0 MSAL.NetCore .NET 8.0.5 Microsoft Windows 10.0.22631 [2024-06-21 13:21:35Z - 3371838e-7dd0-4086-95a7-959168a2e3e8] Only in-memory caching is used. The cache is not persisted and will be lost if the machine is restarted. It also does not scale for a web app or web API, where the number of users can grow large. In production, web apps and web APIs should use distributed caching like Redis. See https://aka.ms/msal-net-cca-token-cache-serialization","@l":"Warning","@tr":"064de7820554cc19c3e55229e3d1c3a9","@sp":"8711683207eea3ee","SourceContext":"Microsoft.Identity.Web.TokenAcquisition","RequestId":"0HN4HUK6REFG2:00000001","RequestPath":"/signin-oidc","ConnectionId":"0HN4HUK6REFG2","ApplicationName":"Trade Hubbing","Environment":"Production"}
{"@t":"2024-06-21T13:24:31.1620985Z","@mt":"True MSAL 4.61.3.0 MSAL.NetCore .NET 8.0.5 Microsoft Windows 10.0.22631 [2024-06-21 13:24:31Z - 2906ee21-5187-474c-8b6e-ff3ad1ca7c0c] Only in-memory caching is used. The cache is not persisted and will be lost if the machine is restarted. It also does not scale for a web app or web API, where the number of users can grow large. In production, web apps and web APIs should use distributed caching like Redis. See https://aka.ms/msal-net-cca-token-cache-serialization","@l":"Warning","@tr":"e57732eb45f1d136e0de314fa9806802","@sp":"acbdd2fef04cce5a","SourceContext":"Microsoft.Identity.Web.TokenAcquisition","RequestId":"0HN4HULRM9I6D:00000001","RequestPath":"/signin-oidc","ConnectionId":"0HN4HULRM9I6D","ApplicationName":"Trade Hubbing","Environment":"Production"}
{"@t":"2024-06-21T13:24:55.3568825Z","@mt":"Unhandled exception rendering component: {Message}","@l":"Warning","@x":"Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.\r\n ---> Microsoft.Data.SqlClient.SqlException (0x80131904): The INSERT statement conflicted with the FOREIGN KEY constraint \"FK_Strategy_Account\". The conflict occurred in database \"justcalltheguy\", table \"dbo.Account\", column 'ID'.\r\n   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\n   at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\n   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)\r\n   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\r\n   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)\r\n   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)\r\n   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)\r\n   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderBaseAsyncCallContext`1 context)\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetAsync(Int32 startCommandIndex, RelationalDataReader reader, CancellationToken cancellationToken)\r\nClientConnectionId:23ea9352-f6a8-436a-ad7c-c4c9cfbcd669\r\nError Number:547,State:0,Class:16\r\nClientConnectionId before routing:adaba8db-f8d3-4fff-a80b-db11f06aede6\r\nRouting Destination:daf8e1e4c395.tr49958.westeurope1-a.worker.database.windows.net,11030\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetAsync(Int32 startCommandIndex, RelationalDataReader reader, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\r\n   at JCTG.WebApp.Backend.Repository.StrategyRepository.AddAsync(Strategy Strategy) in C:\\Users\\joeri.pansaerts\\source\\repos\\JustCallTheGuy\\JCTG.WebApp\\Backend\\Repository\\StrategyRepository.cs:line 24\r\n   at JCTG.WebApp.Frontend.Components.Modal.StrategyAddOrEditModal.SubmitAsync() in C:\\Users\\joeri.pansaerts\\source\\repos\\JustCallTheGuy\\JCTG.WebApp\\Frontend\\Components\\Modal\\StrategyAddOrEditModal.razor:line 100\r\n   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)\r\n   at Microsoft.AspNetCore.Components.Forms.EditForm.HandleSubmitAsync()\r\n   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)\r\n   at Microsoft.AspNetCore.Components.RenderTree.Renderer.GetErrorHandledTask(Task taskToHandle, ComponentState owningComponentState)","@tr":"664dcf4c38d7ed0f9282bbf6aa488713","@sp":"b5804a86654a3cfa","Message":"An error occurred while saving the entity changes. See the inner exception for details.","EventId":{"Id":100,"Name":"ExceptionRenderingComponent"},"SourceContext":"Microsoft.AspNetCore.Components.Server.Circuits.RemoteRenderer","TransportConnectionId":"6wKO9gEdW5p4VNcQqmGH6Q","RequestId":"0HN4HULRM9I6D:0000000F","RequestPath":"/_blazor","ConnectionId":"0HN4HULRM9I6D","ApplicationName":"Trade Hubbing","Environment":"Production"}
{"@t":"2024-06-21T13:24:55.3989226Z","@mt":"Unhandled exception in circuit '{CircuitId}'.","@l":"Error","@x":"Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.\r\n ---> Microsoft.Data.SqlClient.SqlException (0x80131904): The INSERT statement conflicted with the FOREIGN KEY constraint \"FK_Strategy_Account\". The conflict occurred in database \"justcalltheguy\", table \"dbo.Account\", column 'ID'.\r\n   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\n   at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\n   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)\r\n   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\r\n   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)\r\n   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)\r\n   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)\r\n   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderBaseAsyncCallContext`1 context)\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetAsync(Int32 startCommandIndex, RelationalDataReader reader, CancellationToken cancellationToken)\r\nClientConnectionId:23ea9352-f6a8-436a-ad7c-c4c9cfbcd669\r\nError Number:547,State:0,Class:16\r\nClientConnectionId before routing:adaba8db-f8d3-4fff-a80b-db11f06aede6\r\nRouting Destination:daf8e1e4c395.tr49958.westeurope1-a.worker.database.windows.net,11030\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetAsync(Int32 startCommandIndex, RelationalDataReader reader, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\r\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\r\n   at JCTG.WebApp.Backend.Repository.StrategyRepository.AddAsync(Strategy Strategy) in C:\\Users\\joeri.pansaerts\\source\\repos\\JustCallTheGuy\\JCTG.WebApp\\Backend\\Repository\\StrategyRepository.cs:line 24\r\n   at JCTG.WebApp.Frontend.Components.Modal.StrategyAddOrEditModal.SubmitAsync() in C:\\Users\\joeri.pansaerts\\source\\repos\\JustCallTheGuy\\JCTG.WebApp\\Frontend\\Components\\Modal\\StrategyAddOrEditModal.razor:line 100\r\n   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)\r\n   at Microsoft.AspNetCore.Components.Forms.EditForm.HandleSubmitAsync()\r\n   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)\r\n   at Microsoft.AspNetCore.Components.RenderTree.Renderer.GetErrorHandledTask(Task taskToHandle, ComponentState owningComponentState)","@tr":"664dcf4c38d7ed0f9282bbf6aa488713","@sp":"b5804a86654a3cfa","CircuitId":"hHvEeky_n7c8NnL8piHczFRG5DbSWq9NgXo1hkvTIgY","EventId":{"Id":111,"Name":"CircuitUnhandledException"},"SourceContext":"Microsoft.AspNetCore.Components.Server.Circuits.CircuitHost","TransportConnectionId":"6wKO9gEdW5p4VNcQqmGH6Q","RequestId":"0HN4HULRM9I6D:0000000F","RequestPath":"/_blazor","ConnectionId":"0HN4HULRM9I6D","ApplicationName":"Trade Hubbing","Environment":"Production"}
{"@t":"2024-06-21T13:25:31.0390873Z","@mt":"True MSAL 4.61.3.0 MSAL.NetCore .NET 8.0.5 Microsoft Windows 10.0.22631 [2024-06-21 13:25:31Z - 217fff15-9f8f-47f3-9a3b-5c363f551f56] Only in-memory caching is used. The cache is not persisted and will be lost if the machine is restarted. It also does not scale for a web app or web API, where the number of users can grow large. In production, web apps and web APIs should use distributed caching like Redis. See https://aka.ms/msal-net-cca-token-cache-serialization","@l":"Warning","@tr":"7c100d35a07092b28a9fbad4412cfb54","@sp":"8433ae65d0c2d956","SourceContext":"Microsoft.Identity.Web.TokenAcquisition","RequestId":"0HN4HUMDP3IB9:00000001","RequestPath":"/signin-oidc","ConnectionId":"0HN4HUMDP3IB9","ApplicationName":"Trade Hubbing","Environment":"Production"}
{"@t":"2024-06-21T13:27:11.4653391Z","@mt":"True MSAL 4.61.3.0 MSAL.NetCore .NET 8.0.5 Microsoft Windows 10.0.22631 [2024-06-21 13:27:11Z - 1279ea4d-edee-47ea-becb-1dde710ac575] Only in-memory caching is used. The cache is not persisted and will be lost if the machine is restarted. It also does not scale for a web app or web API, where the number of users can grow large. In production, web apps and web APIs should use distributed caching like Redis. See https://aka.ms/msal-net-cca-token-cache-serialization","@l":"Warning","@tr":"0c2f6181efc4064b439cd2589307ca6c","@sp":"8e606c7972a10383","SourceContext":"Microsoft.Identity.Web.TokenAcquisition","RequestId":"0HN4HUNBR8A10:00000001","RequestPath":"/signin-oidc","ConnectionId":"0HN4HUNBR8A10","ApplicationName":"Trade Hubbing","Environment":"Production"}
{"@t":"2024-06-21T13:28:38.3423992Z","@mt":"True MSAL 4.61.3.0 MSAL.NetCore .NET 8.0.5 Microsoft Windows 10.0.22631 [2024-06-21 13:28:38Z - edddd525-814c-4024-bb63-11db2d3e725f] Only in-memory caching is used. The cache is not persisted and will be lost if the machine is restarted. It also does not scale for a web app or web API, where the number of users can grow large. In production, web apps and web APIs should use distributed caching like Redis. See https://aka.ms/msal-net-cca-token-cache-serialization","@l":"Warning","@tr":"7192ba941f7461ad4de9c394ceb19cb3","@sp":"91af81165a8eb7d7","SourceContext":"Microsoft.Identity.Web.TokenAcquisition","RequestId":"0HN4HUO5NEN2N:00000001","RequestPath":"/signin-oidc","ConnectionId":"0HN4HUO5NEN2N","ApplicationName":"Trade Hubbing","Environment":"Production"}
{"@t":"2024-06-21T13:29:22.0540696Z","@mt":"True MSAL 4.61.3.0 MSAL.NetCore .NET 8.0.5 Microsoft Windows 10.0.22631 [2024-06-21 13:29:22Z - 966d9309-acb9-461d-8a44-5015a6cc2cb3] Only in-memory caching is used. The cache is not persisted and will be lost if the machine is restarted. It also does not scale for a web app or web API, where the number of users can grow large. In production, web apps and web APIs should use distributed caching like Redis. See https://aka.ms/msal-net-cca-token-cache-serialization","@l":"Warning","@tr":"d002d072849941ca4391f7c992842d9a","@sp":"eef31ec7eb9b0809","SourceContext":"Microsoft.Identity.Web.TokenAcquisition","RequestId":"0HN4HUOINAIBL:00000001","RequestPath":"/signin-oidc","ConnectionId":"0HN4HUOINAIBL","ApplicationName":"Trade Hubbing","Environment":"Production"}
{"@t":"2024-06-21T13:30:35.1049591Z","@mt":"True MSAL 4.61.3.0 MSAL.NetCore .NET 8.0.5 Microsoft Windows 10.0.22631 [2024-06-21 13:30:35Z - 7868ade1-3711-41df-9bd2-8f8db0ed3713] Only in-memory caching is used. The cache is not persisted and will be lost if the machine is restarted. It also does not scale for a web app or web API, where the number of users can grow large. In production, web apps and web APIs should use distributed caching like Redis. See https://aka.ms/msal-net-cca-token-cache-serialization","@l":"Warning","@tr":"2a8715e861897a54b65727717110fcc5","@sp":"00cc07952fa284fa","SourceContext":"Microsoft.Identity.Web.TokenAcquisition","RequestId":"0HN4HUP8E5CTT:00000001","RequestPath":"/signin-oidc","ConnectionId":"0HN4HUP8E5CTT","ApplicationName":"Trade Hubbing","Environment":"Production"}
{"@t":"2024-06-21T13:36:17.1593779Z","@mt":"True MSAL 4.61.3.0 MSAL.NetCore .NET 8.0.5 Microsoft Windows 10.0.22631 [2024-06-21 13:36:17Z - ba2aac7d-88ec-4557-b832-23c4f954eba7] Only in-memory caching is used. The cache is not persisted and will be lost if the machine is restarted. It also does not scale for a web app or web API, where the number of users can grow large. In production, web apps and web APIs should use distributed caching like Redis. See https://aka.ms/msal-net-cca-token-cache-serialization","@l":"Warning","@tr":"c566f3430172e0e14410983e7eaad6cb","@sp":"fc7d3b10dbaa5b1c","SourceContext":"Microsoft.Identity.Web.TokenAcquisition","RequestId":"0HN4HUSDTV933:00000001","RequestPath":"/signin-oidc","ConnectionId":"0HN4HUSDTV933","ApplicationName":"Trade Hubbing","Environment":"Production"}
{"@t":"2024-06-21T13:37:17.0101518Z","@mt":"True MSAL 4.61.3.0 MSAL.NetCore .NET 8.0.5 Microsoft Windows 10.0.22631 [2024-06-21 13:37:17Z - fd607222-c187-4a55-9d07-25c967cf1e03] Only in-memory caching is used. The cache is not persisted and will be lost if the machine is restarted. It also does not scale for a web app or web API, where the number of users can grow large. In production, web apps and web APIs should use distributed caching like Redis. See https://aka.ms/msal-net-cca-token-cache-serialization","@l":"Warning","@tr":"0e2d20401cda0c2baad5b009bcf9b18e","@sp":"38e4c4787e5bf6ce","SourceContext":"Microsoft.Identity.Web.TokenAcquisition","RequestId":"0HN4HUT028DSG:00000001","RequestPath":"/signin-oidc","ConnectionId":"0HN4HUT028DSG","ApplicationName":"Trade Hubbing","Environment":"Production"}
{"@t":"2024-06-21T13:40:53.5470020Z","@mt":"True MSAL 4.61.3.0 MSAL.NetCore .NET 8.0.5 Microsoft Windows 10.0.22631 [2024-06-21 13:40:53Z - b0ffc074-3415-41e1-910c-f80b0059b908] Only in-memory caching is used. The cache is not persisted and will be lost if the machine is restarted. It also does not scale for a web app or web API, where the number of users can grow large. In production, web apps and web APIs should use distributed caching like Redis. See https://aka.ms/msal-net-cca-token-cache-serialization","@l":"Warning","@tr":"7e1e181d441b5cb6a4a121c6159dda03","@sp":"a0b1e7f1baf53abf","SourceContext":"Microsoft.Identity.Web.TokenAcquisition","RequestId":"0HN4HUUVVE6U9:00000001","RequestPath":"/signin-oidc","ConnectionId":"0HN4HUUVVE6U9","ApplicationName":"Trade Hubbing","Environment":"Production"}
{"@t":"2024-06-21T13:43:32.4928497Z","@mt":"True MSAL 4.61.3.0 MSAL.NetCore .NET 8.0.5 Microsoft Windows 10.0.22631 [2024-06-21 13:43:32Z - 71112a10-ead1-45f3-a75f-ccf543137f9b] Only in-memory caching is used. The cache is not persisted and will be lost if the machine is restarted. It also does not scale for a web app or web API, where the number of users can grow large. In production, web apps and web APIs should use distributed caching like Redis. See https://aka.ms/msal-net-cca-token-cache-serialization","@l":"Warning","@tr":"056edb59a02ec69678e55e27074d263b","@sp":"a355c33891e17643","SourceContext":"Microsoft.Identity.Web.TokenAcquisition","RequestId":"0HN4HV0G4SJBC:00000001","RequestPath":"/signin-oidc","ConnectionId":"0HN4HV0G4SJBC","ApplicationName":"Trade Hubbing","Environment":"Production"}
