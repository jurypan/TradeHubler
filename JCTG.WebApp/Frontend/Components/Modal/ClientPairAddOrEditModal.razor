@inject ClientPairRepository _clientPairRepository;
@inject StrategyRepository _strategyRepository;
@using JCTG.Models;


<div class="modal fade @_cssClass" tabindex="-1" style="display:@_display">
    <EditForm Model="@model" OnValidSubmit="@SubmitAsync">
        <div class=" modal-dialog modal-dialog-scrollable modal-xl">
            <div class="modal-content">
                <div class="modal-header modal-colored-header bg-primary text-white">
                    <h4 class="modal-title text-white" id="primary-header-modalLabel"> Pair </h4>
                    <span type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close" @onclick="async () => await CloseAsync()"></span>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <AntiforgeryToken />
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="ticker-in-tradingview">Ticker in tradingview</label>
                                <InputText class="form-control" @bind-Value="model.TickerInTradingView" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="ticker-in-metatrader">Ticker in metatrader</label>
                                <InputText class="form-control" @bind-Value="model.TickerInMetatrader" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="timeframe">Timeframe</label>
                                <InputSelect class="form-select col-12" @bind-Value="model.Timeframe">
                                    <option>Choose...</option>
                                    <option value="M1">M1</option>
                                    <option value="M2">M2</option>
                                    <option value="M3">M3</option>
                                    <option value="M4">M4</option>
                                    <option value="M5">M5</option>
                                    <option value="M6">M6</option>
                                    <option value="M10">M10</option>
                                    <option value="M12">M12</option>
                                    <option value="M15">M15</option>
                                    <option value="M20">M20</option>
                                    <option value="M30">M30</option>
                                    <option value="H1">H1</option>
                                    <option value="H2">H2</option>
                                    <option value="H3">H3</option>
                                    <option value="H4">H4</option>
                                    <option value="H6">H6</option>
                                    <option value="H8">H8</option>
                                    <option value="H12">H12</option>
                                    <option value="D">D</option>
                                </InputSelect>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="strategy">Strategy</label>
                                <InputSelect class="form-select col-12" @bind-Value="model.StrategyID">
                                    <option>Choose...</option>
                                    @foreach (var item in strategies)
                                    {
                                        <option value="@item.ID">@item.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Risk Long</label>
                                <InputText class="form-control" @bind-Value="model.RiskLongAsString" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Risk Short</label>
                                <InputText class="form-control" @bind-Value="model.RiskShortAsString" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">SL to BE after R</label>
                                <InputText class="form-control" @bind-Value="model.SLtoBEafterRAsString" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="max-spread">Max Spread</label>
                                <InputText class="form-control" @bind-Value="model.MaxSpreadAsString" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="sl-multiplier">SL Multiplier</label>
                                <InputText class="form-control" @bind-Value="model.SLMultiplierAsString" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="max-lot-size">Max Lotsize</label>
                                <InputText class="form-control" @bind-Value="model.MaxLotSizeAsString" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="order-exec-type">Order Exec Type</label>
                                <InputSelect class="form-select col-12" @bind-Value="model.OrderExecType">
                                    <option>Choose...</option>
                                    @foreach (var Item in Enum.GetValues(typeof(OrderExecType)))
                                    {
                                        <option value="@Item">@Item</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <div class="form-check py-2 form-switch">
                                    <InputCheckbox class="form-check-input" @bind-Value="model.CancelStopOrLimitOrderWhenNewSignal" />
                                    <label class="form-check-label" for="flexSwitchCheckDefault">
                                        Cancel (passive) or close (active) order when new signal
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <div class="form-check py-2 form-switch">
                                    <InputCheckbox class="form-check-input" @bind-Value="model.ExecuteMarketOrderOnEntryIfNoPendingOrders" />
                                    <label class="form-check-label" for="flexSwitchCheckDefault">
                                        Execute market order on entry CMD if no pending orders
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Number Of Historical Bars Requested</label>
                                <InputText class="form-control" @bind-Value="model.NumberOfHistoricalBarsRequestedAsString" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Close All Trade sAt</label>
                                <InputText class="form-control" @bind-Value="model.CloseAllTradesAt" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Close Trade Within X Bars</label>
                                <InputText class="form-control" @bind-Value="model.CloseTradeWithinXBarsAsString" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="sl-multiplier">DoNotOpenTradeXMinutesBeforeClose</label>
                                <InputText class="form-control" @bind-Value="model.DoNotOpenTradeXMinutesBeforeCloseAsString" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label class="form-label" for="sl-multiplier">Risk Min X Times The Spread</label>
                                <InputText class="form-control" @bind-Value="model.RiskMinXTimesTheSpreadAsString" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="d-flex gap-6 m-0">
                        <button type="submit" class="btn btn-primary  rounded-pill px-4"> Save </button>
                        <span class="btn bg-danger-subtle text-danger rounded-pill" @onclick="async () => await CloseAsync()"> Discard </span>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnOpen { get; set; }

    [SupplyParameterFromForm]
    private ClientPair model { get; set; } = new();
    private List<Strategy> strategies { get; set; } = new();
    private CrudState _crudState { get; set; } = CrudState.None;

    private string _display = "none;";
    private string _cssClass = "hide";

    public async Task OpenAsync()
    {
        _display = "block;";
        _cssClass = "show";
        await OnOpen.InvokeAsync();
        StateHasChanged();
    }

    public async Task CloseAsync()
    {
        _display = "none;";
        _cssClass = "hide";
        await OnClose.InvokeAsync();
        StateHasChanged();
    }

    public async Task InitAsync(int accountId, long clientId, long? id = null)
    {
        strategies = await _strategyRepository.GetAllAsync(accountId);

        if (id.HasValue)
        {
            var modelNew = await _clientPairRepository.GetById(accountId, clientId, id.Value);
            if (modelNew != null)
            {
                model = modelNew;
                await OpenAsync();
                _crudState = CrudState.Edit;
            }
        }
        else
        {
            model = new() { ClientID = clientId, RiskLong = 0.5, RiskShort = 0.5, MaxSpread = 2.0, SLMultiplier = 1.02, MaxLotSize = 1000, CancelStopOrLimitOrderWhenNewSignal = true, NumberOfHistoricalBarsRequested = 100, RiskMinXTimesTheSpread = 3 };
            await OpenAsync();
            _crudState = CrudState.Add;
        }
    }

    public async Task CopyAsync(int accountId, long clientId, long id)
    {
        var modelNew = await _clientPairRepository.GetById(accountId, clientId, id);
        if (modelNew != null)
        {
            modelNew = await _clientPairRepository.CopyAsync(modelNew);
            if (modelNew != null)
            {
                model = modelNew;
                await OpenAsync();
                _crudState = CrudState.Edit;
            }
        }
    }

    public async Task SubmitAsync()
    {
        if (model != null)
        {
            if (_crudState == CrudState.Add)
            {
                await _clientPairRepository.AddAsync(model);
            }
            else if (_crudState == CrudState.Edit)
            {
                await _clientPairRepository.EditAsync(model);
            }

            _crudState = CrudState.None;
            model = new() { };
            await CloseAsync();
        }
    }
}
