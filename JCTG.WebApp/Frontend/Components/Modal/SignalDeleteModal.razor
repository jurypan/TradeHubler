@inject SignalRepository _signalRepository;
@using JCTG.Models;

<div class="modal fade @_cssClass" tabindex="-1" style="display:@_display">
    <div class="modal-dialog modal-dialog-scrollable modal-lg">
        <div class="modal-content">
            <div class="modal-header modal-colored-header bg-danger text-white">
                <h4 class="modal-title text-white" id="danger-header-modalLabel">Delete a signal</h4>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close" @onclick="() => Close()"></button>
            </div>
            <div class="modal-body">
                <h5 class="mt-0">Delete a signal?</h5>
                <p>Are you sure you want to delete this signal?</p>
            </div>
            <div class="modal-footer">
                <div class="d-flex gap-6 m-0">
                    <button type="submit" class="btn btn-danger  rounded-pill px-4" @onclick="async () => await SubmitAsync()"> Delete </button>
                    <button class="btn bg-danger-subtle text-danger rounded-pill" @onclick="() => Close()"> Discard </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private Signal signal { get; set; } = new();
    private CrudState _crudState { get; set; } = CrudState.None;

    private string _display = "none;";
    private string _cssClass = "hide";

    public void Open()
    {
        _display = "block;";
        _cssClass = "show";
        StateHasChanged();
    }

    public void Close()
    {
        _display = "none;";
        _cssClass = "hide";
        StateHasChanged();
    }

    public async Task InitAsync(int accountId, long signalId)
    {
        var signalNew = await _signalRepository.GetById(accountId, signalId);
        if (signalNew != null)
        {
            signal = signalNew;
            Open();
            _crudState = CrudState.Delete;
        }
    }

    public async Task SubmitAsync()
    {
        if (signal != null)
        {
            if (_crudState == CrudState.Delete)
            {
                await _signalRepository.DeleteAsync(signal);
            }

            _crudState = CrudState.None;
            signal = new();
            Close();
        }
    }
}
