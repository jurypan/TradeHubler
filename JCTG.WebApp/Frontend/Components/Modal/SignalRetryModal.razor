@inject SignalRepository _signalRepository;
@inject ClientRepository _clientRepository;
@inject JCTG.WebApp.Backend.Queue.AzureQueueClient _server;
@using JCTG.Command
@using JCTG.Models;

<div class="modal fade @_cssClass" tabindex="-1" style="display:@_display">
    <EditForm Model="@model" OnValidSubmit="@SubmitAsync">
        <div class="modal-dialog modal-dialog-scrollable modal-lg">
            <div class="modal-content">
                <div class="modal-header modal-colored-header bg-warning text-white">
                    <h4 class="modal-title text-white" id="danger-header-modalLabel">Retry a signal</h4>
                    <span class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close" @onclick="async () => await CloseAsync()"></span>
                </div>
                <div class="modal-body">
                    <h5 class="mt-0">Retry a signal?</h5>
                    <p>Are you sure you want to retry this signal?</p>
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <AntiforgeryToken />
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="strategy">Client?</label>
                                <InputSelect class="form-select col-12" @bind-Value="model">
                                    <option value="0">Choose...</option>
                                    @foreach (var item in _clients)
                                    {
                                        <option value="@item.ID">@item.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <div class="d-flex gap-6 m-0">
                            <button type="submit" class="btn btn-warning rounded-pill px-4"> Retry </button>
                            <span class="btn bg-danger-subtle text-danger rounded-pill" @onclick="async () => await CloseAsync()"> Discard </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnOpen { get; set; }

    [SupplyParameterFromForm]
    private long model { get; set; } = 0;
    private Signal signal { get; set; } = new();
    private CrudState _crudState { get; set; } = CrudState.None;
    private List<Client> _clients { get; set; } = new();

    private string _display = "none;";
    private string _cssClass = "hide";

    public async Task OpenAsync()
    {
        _display = "block;";
        _cssClass = "show";
        await OnOpen.InvokeAsync();
        StateHasChanged();
    }

    public async Task CloseAsync()
    {
        _display = "none;";
        _cssClass = "hide";
        await OnClose.InvokeAsync();
        StateHasChanged();
    }

    public async Task InitAsync(int accountId, long signalId)
    {
        var signalNew = await _signalRepository.GetByIdAsync(accountId, signalId);
        _clients = await _clientRepository.GetAllAsync(accountId);
        if (signalNew != null)
        {
            signal = signalNew;
            await OpenAsync();
            _crudState = CrudState.Custom1;
        }
    }

    public async Task SubmitAsync()
    {
        if (signal != null)
        {
            if (_crudState == CrudState.Custom1)
            {
                // Create model and send to the client
                var id = await _server.SendOnTradingviewSignalCommandAsync(signal.AccountID, new OnSendTradingviewSignalCommand()
                    {
                        SignalID = signal.ID,
                        AccountID = signal.AccountID,
                        Instrument = signal.Instrument,
                        ClientIDs = model == 0 ? null : new List<long>() { model },
                        OrderType = signal.OrderType,
                        StrategyID = signal.StrategyID,
                        MarketOrder = signal.OrderType == "BUY" || signal.OrderType == "SELL" ? new OnReceivingMarketOrder()
                        {
                            Risk = Convert.ToDecimal(signal.Risk),
                            RiskRewardRatio = Convert.ToDecimal(signal.RiskRewardRatio),
                        } : null,
                        PassiveOrder = signal.OrderType == "BUYSTOP" || signal.OrderType == "SELLSTOP" ? new OnReceivingPassiveOrder()
                        {
                            EntryExpression = signal.EntryExpression,
                            Risk = Convert.ToDecimal(signal.Risk),
                            RiskRewardRatio = Convert.ToDecimal(signal.RiskRewardRatio),
                        } : null,
                    });
            }

            _crudState = CrudState.None;
            signal = new();
            await CloseAsync();
        }
    }
}
