@inject SignalRepository _signalRepository;
@inject JCTG.WebApp.Backend.Websocket.AzurePubSubClient _server;
@using JCTG.Command
@using JCTG.Models;

<div class="modal fade @_cssClass" tabindex="-1" style="display:@_display">
    <div class="modal-dialog modal-dialog-scrollable modal-lg">
        <div class="modal-content">
            <div class="modal-header modal-colored-header bg-warning text-white">
                <h4 class="modal-title text-white" id="danger-header-modalLabel">Retry a signal</h4>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close" @onclick="() => Close()"></button>
            </div>
            <div class="modal-body">
                <h5 class="mt-0">Retry a signal?</h5>
                <p>Are you sure you want to retry this signal?</p>
            </div>
            <div class="modal-footer">
                <div class="d-flex gap-6 m-0">
                    <button type="submit" class="btn btn-warning rounded-pill px-4" @onclick="async () => await SubmitAsync()"> Retry </button>
                    <button class="btn bg-danger-subtle text-danger rounded-pill" @onclick="() => Close()"> Discard </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private Signal signal { get; set; } = new();
    private CrudState _crudState { get; set; } = CrudState.None;

    private string _display = "none;";
    private string _cssClass = "hide";

    public void Open()
    {
        _display = "block;";
        _cssClass = "show";
        StateHasChanged();
    }

    public void Close()
    {
        _display = "none;";
        _cssClass = "hide";
        StateHasChanged();
    }

    public async Task InitAsync(int accountId, long signalId)
    {
        var signalNew = await _signalRepository.GetById(accountId, signalId);
        if (signalNew != null)
        {
            signal = signalNew;
            Open();
            _crudState = CrudState.Custom1;
        }
    }

    public async Task SubmitAsync()
    {
        if (signal != null)
        {
            if (_crudState == CrudState.Custom1)
            {
                // Create model and send to the client
                var id = await _server.SendOnTradingviewSignalCommandAsync(signal.AccountID, new OnSendTradingviewSignalCommand()
                    {
                        SignalID = signal.ID,
                        AccountID = signal.AccountID,
                        Instrument = signal.Instrument,
                        Magic = signal.ID,
                        OrderType = signal.OrderType,
                        StrategyType = signal.StrategyType,
                        MarketOrder = signal.OrderType == "BUY" || signal.OrderType == "SELL" ? new OnReceivingTradingviewSignalEventMarketOrder()
                        {
                            StopLoss = Convert.ToDecimal(signal.StopLoss),
                            Price = Convert.ToDecimal(signal.EntryPrice),
                            TakeProfit = Convert.ToDecimal(signal.TakeProfit),
                        } : null,
                        PassiveOrder = signal.OrderType == "BUYSTOP" || signal.OrderType == "SELLSTOP" ? new OnReceivingTradingviewSignalEventPassiveOrder()
                        {
                            EntryExpression = signal.EntryExpression,
                            Risk = Convert.ToDecimal(signal.Risk),
                            RiskRewardRatio = Convert.ToDecimal(signal.RiskRewardRatio),
                        } : null,
                    });
            }

            _crudState = CrudState.None;
            signal = new();
            Close();
        }
    }
}
