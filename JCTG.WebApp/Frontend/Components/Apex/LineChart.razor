@inject JSInteropt JS


<div @ref=el></div>


@code {
    public ChartOptions Options { get; private set; } = new ChartOptions();
    public bool IsInit { get; set; } = false;
    public ElementReference el { get; set; }


    public async Task InitAsync(string name1, List<LinePoint> data1, string name2, List<LinePoint> data2)
    {
        // Exec javascript
        await JS.LineChartInitAsync(el, name1, data1, name2, data2);

        // Set is init
        IsInit = true;
    }

    public async Task UpdateAsync(string name1, List<LinePoint> data1, string name2, List<LinePoint> data2)
    {
        if(IsInit)
        {
            // Exec javascript
            await JS.LineChartUpdateAsync(el, name1, data1, name2, data2);
        }
        else
        {
            await JS.LineChartInitAsync(el, name1, data1, name2, data2);
            
        }
    }

    public async Task ClearAnnotationsAsync()
    {
        if (IsInit)
        {
            // Exec javascript
            await JS.ClearAnnotationsAsync(el);
        }
    }

    public async Task AddAnnotationsAsync(List<AnnotationPoint> annotations)
    {
        if (IsInit)
        {
            // Exec javascript
            await JS.AddPointAnnotationsAsync(el, annotations);
        }
    }

    public async Task AddAnnotationsAsync(List<AnnotationYAxis> annotations)
    {
        if (IsInit)
        {
            // Exec javascript
            await JS.AddYAxisAnnotationsAsync(el, annotations);
        }
    }

    public async Task AddAnnotationsAsync(List<AnnotationXAxis> annotations)
    {
        if (IsInit)
        {
            // Exec javascript
            await JS.AddXAxisAnnotationsAsync(el, annotations);
        }
    }
}
