@page "/Clients/{clientid:long}/Edit";
@inject ClientRepository _clientRepository;
@inject NavigationManager NavManager
@using JCTG.Models;
@using JCTG.WebApp.Frontend.Components.Widget;

<div class="container-fluid mw-100">

    <div class="font-weight-medium shadow-none position-relative overflow-hidden mb-4">
        <div class="card-body px-0">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="font-weight-medium ">@client?.Name</h4>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item">
                                <a class="text-primary text-decoration-none" href="/">
                                    Home
                                </a>
                            </li>
                            <li class="breadcrumb-item d-flex justify-content-center align-items-center ps-0">
                                <iconify-icon icon="tabler:chevron-right"></iconify-icon>
                            </li>
                            <li class="breadcrumb-item" aria-current="page">
                                <a class="text-primary text-decoration-none" href="/">
                                    Clients
                                </a>
                            </li>
                            <li class="breadcrumb-item d-flex justify-content-center align-items-center ps-0">
                                <iconify-icon icon="tabler:chevron-right"></iconify-icon>
                            </li>
                            <li class="breadcrumb-item" aria-current="page">Edit</li>
                        </ol>
                    </nav>
                </div>
                <div>
                    <LastMonthWidget></LastMonthWidget>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h5>Edit client</h5>
                    <p class="card-subtitle mb-0">
                        To use add <mark><code>.r-separator</code></mark> class in the form with form styling.
                    </p>
                </div>
                <EditForm Model="@client" OnValidSubmit="@SubmitFormClientAsync" class="form-horizontal r-separator">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <AntiforgeryToken />
                    <div class="card-body">
                        <h5>Detail Info</h5>
                        <div class="form-group row align-items-center mb-0">
                            <label for="inputEmail3" class="col-3 text-end control-label col-form-label">Is enable</label>
                            <div class="col-9 border-start pb-2 pt-2">
                                <InputCheckbox class="form-check-input" @bind-Value="client.IsEnable" />
                            </div>
                        </div>
                        <div class="form-group row align-items-center mb-0">
                            <label for="inputEmail3" class="col-3 text-end control-label col-form-label">ID</label>
                            <div class="col-9 border-start pb-2 pt-2">
                                <InputText class="form-control" @bind-Value="client.IDAsString" />
                            </div>
                        </div>
                        <div class="form-group row align-items-center mb-0">
                            <label for="inputEmail3" class="col-3 text-end control-label col-form-label">Name</label>
                            <div class="col-9 border-start pb-2 pt-2">
                                <InputText class="form-control" @bind-Value="client.Name" />
                            </div>
                        </div>
                        <div class="form-group row align-items-center mb-0">
                            <label for="inputEmail3" class="col-3 text-end control-label col-form-label">Start Balance</label>
                            <div class="col-9 border-start pb-2 pt-2">
                                <InputText class="form-control" @bind-Value="client.StartBalanceAsString" />
                            </div>
                        </div>
                        <div class="form-group row align-items-center mb-0">
                            <label for="inputEmail3" class="col-3 text-end control-label col-form-label">MetaTrader Directory Path</label>
                            <div class="col-9 border-start pb-2 pt-2">
                                <InputText class="form-control" @bind-Value="client.MetaTraderDirPath" />
                            </div>
                        </div>
                    </div>
                    <div class="card-body text-bg-light">
                        <h4 class="card-title mt-2 pb-3">Options</h4>
                        <div class="form-group row align-items-center mb-0">
                            <label for="inputEmail3" class="col-3 text-end control-label col-form-label">Currency</label>
                            <div class="col-9 border-start pb-2 pt-2">
                                <input type="text" class="form-control" disabled="disabled" value="@client.Currency" />
                            </div>
                        </div>
                        <div class="form-group row align-items-center mb-0">
                            <label for="inputEmail3" class="col-3 text-end control-label col-form-label">Balance</label>
                            <div class="col-9 border-start pb-2 pt-2">
                                <input type="text" class="form-control" disabled="disabled" value="@client.Balance" />
                            </div>
                        </div>
                        <div class="form-group row align-items-center mb-0">
                            <label for="inputEmail3" class="col-3 text-end control-label col-form-label">Equity</label>
                            <div class="col-9 border-start pb-2 pt-2">
                                <input type="text" class="form-control" disabled="disabled" value="@client.Equity" />
                            </div>
                        </div>
                        <div class="form-group row align-items-center mb-0">
                            <label for="inputEmail3" class="col-3 text-end control-label col-form-label">Leverage</label>
                            <div class="col-9 border-start pb-2 pt-2">
                                <input type="text" class="form-control" disabled="disabled" value="@client.Leverage" />
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="form-group mb-0 text-end">
                            <button type="submit" class="btn btn-primary rounded-pill px-4"> Save </button>
                            <a href="/" class="btn bg-danger-subtle text-danger rounded-pill px-4 ms-6"> Cancel </a>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

    <div class="modal fade @(!_hideModifyModalPair && pair != null ? "show" : "hide")" tabindex="-1" style="display:@(!_hideModifyModalPair && pair != null ? "block" : "hidden");">
        <div class=" modal-dialog modal-dialog-scrollable modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header modal-colored-header bg-primary text-white">
                    <h4 class="modal-title text-white" id="primary-header-modalLabel"> Pair </h4>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close" @onclick="() => ToggleModifyModalPair()"></button>
                </div>
                <EditForm Model="@pair" OnValidSubmit="@SubmitModalPairAsync">
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <AntiforgeryToken />
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="ticker-in-tradingview">Ticker in tradingview</label>
                                    <InputText class="form-control" @bind-Value="pair.TickerInTradingView" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="ticker-in-metatrader">Ticker in metatrader</label>
                                    <InputText class="form-control" @bind-Value="pair.TickerInMetatrader" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="timeframe">Timeframe</label>
                                    <InputSelect class="form-select col-12" @bind-Value="pair.Timeframe">
                                        <option>Choose...</option>
                                        <option value="M5">M5</option>
                                        <option value="M10">M10</option>
                                        <option value="M15">M15</option>
                                        <option value="M30">M30</option>
                                        <option value="M45">M45</option>
                                        <option value="H1">H1</option>
                                        <option value="H4">H4</option>
                                        <option value="D">D</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="strategy">Strategy</label>
                                    <InputSelect class="form-select col-12" @bind-Value="pair.StrategyType">
                                        <option>Choose...</option>
                                        @foreach (var item in Enum.GetValues(typeof(StrategyType)))
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="risk">Risk</label>
                                    <InputText class="form-control" @bind-Value="pair.RiskAsString" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="risk">SL to BE after R</label>
                                    <InputText class="form-control" @bind-Value="pair.SLtoBEafterRAsString" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="max-spread">Max Spread</label>
                                    <InputText class="form-control" @bind-Value="pair.MaxSpreadAsString" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="sl-multiplier">SLMultiplier</label>
                                    <InputText class="form-control" @bind-Value="pair.SLMultiplierAsString" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="max-lot-size">Max Lotsize</label>
                                    <InputText class="form-control" @bind-Value="pair.MaxLotSizeAsString" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="order-exec-type">Order Exec Type</label>
                                    <InputSelect class="form-select col-12" @bind-Value="pair.OrderExecType">
                                        <option>Choose...</option>
                                        @foreach (var Item in Enum.GetValues(typeof(OrderExecType)))
                                        {
                                            <option value="@Item">@Item</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <div class="form-check py-2 form-switch">
                                        <InputCheckbox class="form-check-input" @bind-Value="pair.CancelStopOrLimitOrderWhenNewSignal" />
                                        <label class="form-check-label" for="flexSwitchCheckDefault">
                                            Cancel STOP or LIMIT order when new signal
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="sl-multiplier">NumberOfHistoricalBarsRequested</label>
                                    <InputText class="form-control" @bind-Value="pair.NumberOfHistoricalBarsRequestedAsString" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="max-spread">CloseAllTradesAt</label>
                                    <InputText class="form-control" @bind-Value="pair.CloseAllTradesAt" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="sl-multiplier">DoNotOpenTradeXMinutesBeforeClose</label>
                                    <InputText class="form-control" @bind-Value="pair.DoNotOpenTradeXMinutesBeforeCloseAsString" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="max-spread">Spread Entry</label>
                                    <InputSelect class="form-select col-12" @bind-Value="pair.SpreadEntry">
                                        <option>Choose...</option>
                                        @foreach (var Item in Enum.GetValues(typeof(SpreadExecType)))
                                        {
                                            <option value="@Item">@Item</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="sl-multiplier">Spread SL</label>
                                    <InputSelect class="form-select col-12" @bind-Value="pair.SpreadSL">
                                        <option>Choose...</option>
                                        @foreach (var Item in Enum.GetValues(typeof(SpreadExecType)))
                                        {
                                            <option value="@Item">@Item</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="max-spread">Spread TP</label>
                                    <InputSelect class="form-select col-12" @bind-Value="pair.SpreadTP">
                                        <option>Choose...</option>
                                        @foreach (var Item in Enum.GetValues(typeof(SpreadExecType)))
                                        {
                                            <option value="@Item">@Item</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label" for="sl-multiplier">Risk Min X Times The Spread</label>
                                    <InputText class="form-control" @bind-Value="pair.RiskMinXTimesTheSpreadAsString" />
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="modal-footer">
                        <div class="d-flex gap-6 m-0">
                            <button type="submit" class="btn btn-primary  rounded-pill px-4"> Save </button>
                            <button class="btn bg-danger-subtle text-danger rounded-pill" @onclick="() => ToggleModifyModalPair()"> Discard </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

    <div class="modal fade  @(!_hideDeleteModalPair ? "show" : "hide")" tabindex="-1" style="display:@(!_hideDeleteModalPair ? "block" : "hidden");">
        <div class="modal-dialog modal-dialog-scrollable modal-lg">
            <div class="modal-content">
                <div class="modal-header modal-colored-header bg-danger text-white">
                    <h4 class="modal-title text-white" id="danger-header-modalLabel">Delete Pair</h4>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close" @onclick="() => ToggleDeleteModalPair()"></button>
                </div>
                <div class="modal-body">
                    <h5 class="mt-0">Delete a pair?</h5>
                    <p>Are you sure you want to delete this pair?</p>
                </div>
                <div class="modal-footer">
                    <div class="d-flex gap-6 m-0">
                        <button type="submit" class="btn btn-danger  rounded-pill px-4" @onclick="async () => await SubmitModalPairAsync()"> Delete </button>
                        <button class="btn bg-danger-subtle text-danger rounded-pill" @onclick="() => ToggleDeleteModalPair()"> Discard </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card w-100 position-relative overflow-hidden">
        <div class="card card-body">
            <div class="row">
                <div class="col-md-4 col-xl-3">
                    <h5 class="card-title fw-semibold mb-0 lh-sm">Pairs</h5>
                </div>
                <div class="col-md-8 col-xl-9 text-end d-flex justify-content-md-end justify-content-center mt-3 mt-md-0">
                    <a class="btn btn-primary d-flex align-items-center" @onclick="() => AddAPairClick()">Add a pair</a>
                </div>
            </div>
        </div>
        @if (client != null)
        {
            if (client.Pairs != null && client.Pairs.Count > 0)
            {
                <div class="card-body p-4">
                    <div class="table-responsive rounded-2 mb-4">
                        <table class="table border text-nowrap customize-table mb-0 align-middle">
                            <thead class="text-dark fs-4">
                                <tr>
                                    <th>
                                        <h6 class="fs-4 fw-semibold mb-0">Ticker in Tradingview</h6>
                                    </th>
                                    <th>
                                        <h6 class="fs-4 fw-semibold mb-0">Ticker in Metatrader</h6>
                                    </th>
                                    <th>
                                        <h6 class="fs-4 fw-semibold mb-0">Strategy</h6>
                                    </th>
                                    <th>
                                        <h6 class="fs-4 fw-semibold mb-0">Timeframe</h6>
                                    </th>
                                    <th>
                                        <h6 class="fs-4 fw-semibold mb-0">Risk</h6>
                                    </th>

                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var pair in client?.Pairs)
                                {
                                    <tr>
                                        <td>
                                            <h6 class="fs-4 fw-semibold mb-0">@pair.TickerInTradingView</h6>
                                        </td>
                                        <td>
                                            <p class="mb-0 fw-normal">@pair.TickerInMetatrader</p>
                                        </td>
                                        <td>
                                            <div class="d-flex align-items-center gap-2">
                                                @if (pair.StrategyType == StrategyType.Strategy1)
                                                {
                                                    <span class="badge text-bg-primary rounded-3 fw-semibold fs-2">Strategy 1</span>
                                                }
                                                else if (pair.StrategyType == StrategyType.Strategy2)
                                                {
                                                    <span class="badge text-bg-success rounded-3 fw-semibold fs-2">Strategy 2</span>
                                                }
                                                else if (pair.StrategyType == StrategyType.Strategy3)
                                                {
                                                    <span class="badge text-bg-secondary rounded-3 fw-semibold fs-2">Strategy 3</span>
                                                }
                                                else if (pair.StrategyType == StrategyType.Strategy4)
                                                {
                                                    <span class="badge text-bg-danger rounded-3 fw-semibold fs-2">Strategy 4</span>
                                                }
                                                else if (pair.StrategyType == StrategyType.Strategy5)
                                                {
                                                    <span class="badge text-bg-indigo rounded-3 fw-semibold fs-2">Strategy 5</span>
                                                }
                                            </div>
                                        </td>
                                        <td>
                                            <p class="mb-0 fw-normal">@pair.Timeframe</p>
                                        </td>
                                        <td>
                                            <p class="mb-0 fw-normal">@pair.Risk</p>
                                        </td>
                                        <td>
                                            <div class="dropdown dropstart">
                                                <a href="#" class="text-muted" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="ti ti-dots-vertical fs-6"></i>
                                                </a>
                                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                                    <li>
                                                        <a class="dropdown-item d-flex align-items-center gap-3" @onclick="() => EditAPairClick(pair.ID)">Edit</a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item d-flex align-items-center gap-3" @onclick="() => DeleteAPairClick(pair.ID)">Delete</a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item d-flex align-items-center gap-3" @onclick="async () => await CopyAPairClickAsync(pair.ID)">Copy</a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
            else
            {
                <div class="card-body text-center">
                    <h3 class="fw-semibold">No pairs available for this client</h3>
                    <p class="fw-normal mb-4 fs-4">Without pairs it's impossible to take trades</p>
                    <a class="btn btn-primary mb-8" @onclick="() => AddAPairClick()">Add a pair</a>
                </div>
            }
        }
        else
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }

    </div>

    <div class="modal fade @(!_hideModifyModalRisk && risk != null ? "show" : "hide")" tabindex="-1" style="display:@(!_hideModifyModalRisk && risk != null ? "block" : "hidden");">
        <div class=" modal-dialog modal-dialog-scrollable modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header modal-colored-header bg-primary text-white">
                    <h4 class="modal-title text-white" id="primary-header-modalLabel"> Risk Definition </h4>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close" @onclick="() => ToggleModifyModalRisk()"></button>
                </div>
                <EditForm Model="@risk" OnValidSubmit="@SubmitModalRiskAsync">
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <AntiforgeryToken />
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label" for="ticker-in-tradingview">Procent</label>
                                    <InputText class="form-control" @bind-Value="risk.ProcentAsString" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label" for="ticker-in-metatrader">Multiplier</label>
                                    <InputText class="form-control" @bind-Value="risk.MultiplierAsString" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <div class="d-flex gap-6 m-0">
                            <button type="submit" class="btn btn-primary  rounded-pill px-4"> Save </button>
                            <button class="btn bg-danger-subtle text-danger rounded-pill" @onclick="() => ToggleModifyModalRisk()"> Discard </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

    <div class="modal fade  @(!_hideDeleteModalRisk ? "show" : "hide")" tabindex="-1" style="display:@(!_hideDeleteModalRisk ? "block" : "hidden");">
        <div class="modal-dialog modal-dialog-scrollable modal-lg">
            <div class="modal-content">
                <div class="modal-header modal-colored-header bg-danger text-white">
                    <h4 class="modal-title text-white" id="danger-header-modalLabel">Delete a risk definition</h4>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close" @onclick="() => ToggleDeleteModalRisk()"></button>
                </div>
                <div class="modal-body">
                    <h5 class="mt-0">Delete a risk defintion?</h5>
                    <p>Are you sure you want to delete this risk defintion?</p>
                </div>
                <div class="modal-footer">
                    <div class="d-flex gap-6 m-0">
                        <button type="submit" class="btn btn-danger  rounded-pill px-4" @onclick="async () => await SubmitModalRiskAsync()"> Delete </button>
                        <button class="btn bg-danger-subtle text-danger rounded-pill" @onclick="() => ToggleDeleteModalRisk()"> Discard </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card w-100 position-relative overflow-hidden">
        <div class="card card-body">
            <div class="row">
                <div class="col-md-4 col-xl-3">
                    <h5 class="card-title fw-semibold mb-0 lh-sm">Risks</h5>
                </div>
                <div class="col-md-8 col-xl-9 text-end d-flex justify-content-md-end justify-content-center mt-3 mt-md-0">
                    <a class="btn btn-primary d-flex align-items-center" @onclick="() => AddARiskClick()">Add a risk definition</a>
                </div>
            </div>
        </div>
        @if (client != null)
        {
            if (client.Risks != null && client.Risks.Count > 0)
            {
                <div class="card-body p-4">
                    <div class="table-responsive rounded-2 mb-4">
                        <table class="table border text-nowrap customize-table mb-0 align-middle">
                            <thead class="text-dark fs-4">
                                <tr>
                                    <th>
                                        <h6 class="fs-4 fw-semibold mb-0">Procent</h6>
                                    </th>
                                    <th>
                                        <h6 class="fs-4 fw-semibold mb-0">Multiplier</h6>
                                    </th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var risk in client?.Risks?.OrderBy(f => f.Procent))
                                {
                                    <tr>
                                        <td>
                                            <h6 class="fs-4 fw-semibold mb-0">@risk.Procent</h6>
                                        </td>
                                        <td>
                                            <p class="mb-0 fw-normal">@risk.Multiplier</p>
                                        </td>
                                        <td>
                                            <div class="dropdown dropstart">
                                                <a href="#" class="text-muted" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="ti ti-dots-vertical fs-6"></i>
                                                </a>
                                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                                    <li>
                                                        <a class="dropdown-item d-flex align-items-center gap-3" @onclick="() => EditARiskClick(risk.ID)">Edit</a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item d-flex align-items-center gap-3" @onclick="() => DeleteARiskClick(risk.ID)">Delete</a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
            else
            {
                <div class="card-body text-center">
                    <h3 class="fw-semibold">No risk is defined for this client</h3>
                    <p class="fw-normal mb-4 fs-4">Without at least 1 risk definition, it's impossible to take trades</p>
                    <a class="btn btn-primary mb-8" @onclick="async () => await AddARiskTemplateClickAsync()">Add default template</a>
                </div>
            }
        }
        else
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
    </div>
</div>



@code {

    [Parameter]
    public long ClientId { get; set; }

    [SupplyParameterFromForm]
    private ClientPair pair { get; set; } = new();

    [SupplyParameterFromForm]
    private ClientRisk risk { get; set; } = new();

    [SupplyParameterFromForm]
    private Entity.Client client { get; set; } = new Client() { Name = string.Empty };

    private bool _hideModifyModalPair { get; set; } = true;
    private bool _hideDeleteModalPair { get; set; } = true;
    private bool _hideModifyModalRisk { get; set; } = true;
    private bool _hideDeleteModalRisk { get; set; } = true;

    private CrudState crudPairState { get; set; } = CrudState.None;
    private CrudState crudRiskState { get; set; } = CrudState.None;




    protected async override Task OnInitializedAsync()
    {
        client = await _clientRepository.GetByIdAsync(692803787, ClientId);
    }

    private void AddAPairClick()
    {
        crudPairState = CrudState.Add;
        ToggleModifyModalPair();
        pair = new();
    }

    private void EditAPairClick(long id)
    {
        crudPairState = CrudState.Edit;
        ToggleModifyModalPair();
        if (client != null)
        {
            pair = client.Pairs.First(f => f.ID == id);
        }
    }
    private async Task CopyAPairClickAsync(long id)
    {
        if (client != null)
        {
            pair = client.Pairs.First(f => f.ID == id);
            pair = await _clientRepository.CopyPairAsync(pair);
            ToggleModifyModalPair();
            client = await _clientRepository.GetByIdAsync(692803787, ClientId);
            crudPairState = CrudState.Edit;
        }
    }

    private void DeleteAPairClick(long id)
    {
        crudPairState = CrudState.Delete;
        ToggleDeleteModalPair();
        if (client != null)
        {
            pair = client.Pairs.First(f => f.ID == id);
        }
    }

    private void ToggleModifyModalPair()
    {
        _hideModifyModalPair = !_hideModifyModalPair;
    }

    private void ToggleDeleteModalPair()
    {
        _hideDeleteModalPair = !_hideDeleteModalPair;
    }

    private async Task SubmitModalPairAsync()
    {
        if (pair != null)
        {
            if (crudPairState == CrudState.Add)
            {
                pair.ClientID = ClientId;
                await _clientRepository.AddPairAsync(pair);
            }
            else if (crudPairState == CrudState.Edit)
            {
                pair.ClientID = ClientId;
                await _clientRepository.EditPairAsync(pair);
            }
            else if (crudPairState == CrudState.Delete)
            {
                pair.ClientID = ClientId;
                await _clientRepository.DeletePairAsync(pair);
            }

            crudPairState = CrudState.None;
            pair = new();
            _hideModifyModalPair = true;
            _hideDeleteModalPair = true;
            client = await _clientRepository.GetByIdAsync(692803787, ClientId);
        }
    }


    private void AddARiskClick()
    {
        crudRiskState = CrudState.Add;
        ToggleModifyModalRisk();
        risk = new();
    }

    private async Task AddARiskTemplateClickAsync()
    {
        await _clientRepository.AddRiskAsync(new ClientRisk()
            {
                ClientID = ClientId,
                DateCreated = DateTime.UtcNow,
                Procent = -6,
                Multiplier = 0.25,
            });
        await _clientRepository.AddRiskAsync(new ClientRisk()
            {
                ClientID = ClientId,
                DateCreated = DateTime.UtcNow,
                Procent = -5,
                Multiplier = 0.4,
            });
        await _clientRepository.AddRiskAsync(new ClientRisk()
            {
                ClientID = ClientId,
                DateCreated = DateTime.UtcNow,
                Procent = -4,
                Multiplier = 0.5,
            });
        await _clientRepository.AddRiskAsync(new ClientRisk()
            {
                ClientID = ClientId,
                DateCreated = DateTime.UtcNow,
                Procent = -3,
                Multiplier = 0.6,
            });
        await _clientRepository.AddRiskAsync(new ClientRisk()
            {
                ClientID = ClientId,
                DateCreated = DateTime.UtcNow,
                Procent = -2,
                Multiplier = 0.75,
            });
        await _clientRepository.AddRiskAsync(new ClientRisk()
            {
                ClientID = ClientId,
                DateCreated = DateTime.UtcNow,
                Procent = -1,
                Multiplier = 0.85,
            });
        await _clientRepository.AddRiskAsync(new ClientRisk()
            {
                ClientID = ClientId,
                DateCreated = DateTime.UtcNow,
                Procent = 0,
                Multiplier = 1,
            });
        await _clientRepository.AddRiskAsync(new ClientRisk()
            {
                ClientID = ClientId,
                DateCreated = DateTime.UtcNow,
                Procent = 1,
                Multiplier = 1.1,
            });
        await _clientRepository.AddRiskAsync(new ClientRisk()
            {
                ClientID = ClientId,
                DateCreated = DateTime.UtcNow,
                Procent = 2,
                Multiplier = 1.25,
            });
        await _clientRepository.AddRiskAsync(new ClientRisk()
            {
                ClientID = ClientId,
                DateCreated = DateTime.UtcNow,
                Procent = 3,
                Multiplier = 1.4,
            });
        await _clientRepository.AddRiskAsync(new ClientRisk()
            {
                ClientID = ClientId,
                DateCreated = DateTime.UtcNow,
                Procent = 4,
                Multiplier = 1.5,
            });
        client = await _clientRepository.GetByIdAsync(692803787, ClientId);
    }

    private void EditARiskClick(long id)
    {
        crudRiskState = CrudState.Edit;
        ToggleModifyModalRisk();
        if (client != null)
        {
            risk = client.Risks.First(f => f.ID == id);
        }
    }

    private void DeleteARiskClick(long id)
    {
        crudRiskState = CrudState.Delete;
        ToggleDeleteModalRisk();
        if (client != null)
        {
            risk = client.Risks.First(f => f.ID == id);
        }
    }

    private void ToggleModifyModalRisk()
    {
        _hideModifyModalRisk = !_hideModifyModalRisk;
    }

    private void ToggleDeleteModalRisk()
    {
        _hideDeleteModalRisk = !_hideDeleteModalRisk;
    }

    private async Task SubmitModalRiskAsync()
    {
        if (risk != null)
        {
            if (crudRiskState == CrudState.Add)
            {
                risk.ClientID = ClientId;
                await _clientRepository.AddRiskAsync(risk);
            }
            else if (crudRiskState == CrudState.Edit)
            {
                risk.ClientID = ClientId;
                await _clientRepository.EditRiskAsync(risk);
            }
            else if (crudRiskState == CrudState.Delete)
            {
                risk.ClientID = ClientId;
                await _clientRepository.DeleteRiskAsync(risk);
            }

            crudRiskState = CrudState.None;
            risk = new();
            _hideModifyModalRisk = true;
            _hideDeleteModalRisk = true;
            client = await _clientRepository.GetByIdAsync(692803787, ClientId);
        }
    }


    private async Task SubmitFormClientAsync()
    {
        if (client != null)
        {
            await _clientRepository.EditAsync(692803787, client);
            var clientNew = await _clientRepository.GetByIdAsync(692803787, ClientId);
            if (clientNew != null)
                client = clientNew;
            NavManager.NavigateTo("/");
        }
    }
}
