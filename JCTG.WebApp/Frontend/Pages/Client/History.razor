@page "/Clients/{clientid:long}/History";
@inject ClientRepository _clientRepository;
@inject DealRepository _dealRepository;
@using JCTG.WebApp.Frontend.Components.Tradingview

<h1>History</h1>

<Chart @ref=tv />

@code {
    [Parameter]
    public long ClientId { get; set; }

    Chart? tv;
    IEnumerable<Deal>? deals;
    Client? client;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Only on first render
        if (!firstRender || tv == null)
            return;

        // Get data from database
        deals = await _dealRepository.GetAll(this.ClientId);
        client = await _clientRepository.GetById(692803787, this.ClientId);

        // Init tradingview Chart
        await tv.InitAsync(new()
            {
                Width = -75,
                Height = 500,
            });

        // Do null reference check
        if(tv.IsInit)
        {
            // Calculate cumulative commission for each deal
            var cumulativeCommissions = new Dictionary<DateTime, decimal>();
            decimal totalCommission = 0.0M;
            foreach (var deal in deals.Where(f => f.AccountBalance.HasValue).OrderBy(f => f.DateCreated))
            {
                totalCommission += Convert.ToDecimal(deal.Commission);
                totalCommission += Convert.ToDecimal(deal.Swap);
                cumulativeCommissions[deal.DateCreated] = totalCommission;
            }

            // Use the cumulative commissions in the query
            await tv.AddLineSeriesAsync(deals
                .Where(f => f.AccountBalance.HasValue)
                .Select(x => new PricePoint()
                    {
                        Time = x.DateCreated,
                        Price = x.AccountBalance.HasValue ? Convert.ToDecimal(x.AccountBalance.Value) - cumulativeCommissions[x.DateCreated] : 0.0M
                    }).OrderBy(f => f.Time).ToList());


            // Load the chart
            await tv.AddAreaSeriesAsync(deals.Where(f => f.AccountBalance.HasValue).Select(x => new AreaPoint()
                {
                    Time = x.DateCreated,
                    Price = x.AccountBalance.HasValue ? Convert.ToDecimal(x.AccountBalance.Value) : 0.0M
                }).OrderBy(f => f.Time).ToList());
        }
    }
}
