@page "/Clients/{clientid:long}/History";
@inject ClientRepository _clientRepository;
@inject DealRepository _dealRepository;
@inject OrderRepository _orderRepository
@using JCTG.WebApp.Frontend.Components.Apex;
@using JCTG.WebApp.Frontend.Components.Widget;

<div class="container-fluid mw-100">
    <div class="font-weight-medium shadow-none position-relative overflow-hidden mb-4">
        <div class="card-body px-0">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="font-weight-medium ">@_client?.Name</h4>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item">
                                <a class="text-primary text-decoration-none" href="/">
                                    Home
                                </a>
                            </li>
                            <li class="breadcrumb-item d-flex justify-content-center align-items-center ps-0">
                                <iconify-icon icon="tabler:chevron-right"></iconify-icon>
                            </li>
                            <li class="breadcrumb-item" aria-current="page">
                                <a class="text-primary text-decoration-none" href="/">
                                    Clients
                                </a>
                            </li>
                            <li class="breadcrumb-item d-flex justify-content-center align-items-center ps-0">
                                <iconify-icon icon="tabler:chevron-right"></iconify-icon>
                            </li>
                            <li class="breadcrumb-item" aria-current="page">History</li>
                        </ol>
                    </nav>
                </div>
                <div>
                   <LastMonthWidget></LastMonthWidget>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <h4 class="mb-3 mt-4 fs-5">Profit and costs</h4>
        <div class="col-lg-3 col-md-6">
            <div class="card border-top border-info">
                <div class="card-body">
                    <div class="d-flex no-block align-items-center">
                        <div>
                            <h2 class="fs-7">$@_totalPnl</h2>
                            <h6 class="fw-medium text-info mb-0">Total PNL</h6>
                        </div>
                        <div class="ms-auto">
                            <span class="text-info display-6"><i class="ti ti-chart-bar"></i></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="card border-top border-primary">
                <div class="card-body">
                    <div class="d-flex no-block align-items-center">
                        <div>
                            <h2 class="fs-7">$@_totalCommission</h2>
                            <h6 class="fw-medium text-primary mb-0">Total Commission</h6>
                        </div>
                        <div class="ms-auto">
                            <span class="text-primary display-6"><i class="ti ti-rss"></i></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="card border-top border-dark">
                <div class="card-body">
                    <div class="d-flex no-block align-items-center">
                        <div>
                            <h2 class="fs-7">$@_totalSwapCosts</h2>
                            <h6 class="fw-medium text-dark mb-0">Total Swap Costs</h6>
                        </div>
                        <div class="ms-auto">
                            <span class="text-dark display-6"><i class="ti ti-archive"></i></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="card border-top border-success">
                <div class="card-body">
                    <div class="d-flex no-block align-items-center">
                        <div>
                            <h2 class="fs-7">$@_totalSpreadCosts</h2>
                            <h6 class="fw-medium text-success mb-0">Total spread costs</h6>
                        </div>
                        <div class="ms-auto">
                            <span class="text-success display-6"><i class="ti ti-map"></i></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h5>History of the deals</h5>
                    <AreaChart @ref=_areaChart />
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="datatables">
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-body">
                            <div class="mb-2">
                                <h5 class="mb-0">File export</h5>
                            </div>
                            <p class="card-subtitle mb-3">
                                Exporting data from a table can often be a key part of a
                                complex application. The Buttons extension for DataTables
                                provides three plug-ins that provide overlapping
                                functionality for data export. You can refer full
                                documentation from here
                                <a href="https://datatables.net/">Datatables</a>
                            </p>
                            <div class="table-responsive">
                                <table id="file_export" class="table border table-striped table-bordered display text-nowrap">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Symbol</th>
                                            <th>Type</th>
                                            <th>Open Time</th>
                                            <th>Close Time</th>
                                            <th>PNL</th>
                                            <th>Commission</th>
                                            <th>Swap</th>
                                            <th>Spreadcost</th>
                                            <th>Signal</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var order in _orders.OrderByDescending(f => f.DateCreated))
                                        {
                                            <tr>
                                                <td>@order.ID</td>
                                                <td>@order.Symbol</td>
                                                <td>@order.Type</td>
                                                <td>@order.OpenTime</td>
                                                <td>@order.CloseTime</td>
                                                <td>@Math.Round(order.Pnl, 4)</td>
                                                <td>@Math.Round(order.Commission, 4)</td>
                                                <td>@Math.Round(order.Swap, 4)</td>
                                                <td>@Math.Round(order.SpreadCost, 4)</td>
                                                <td>@order.Signal.TradingviewStateType</td>
                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <th>ID</th>
                                            <th>Symbol</th>
                                            <th>Type</th>
                                            <th>Open Time</th>
                                            <th>Close Time</th>
                                            <th>PNL</th>
                                            <th>Commission</th>
                                            <th>Swap</th>
                                            <th>Spreadcost</th>
                                            <th>Signal</th>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public long ClientId { get; set; }

    private AreaChart? _areaChart;
    private List<Entity.Deal> _deals = new();
    private List<Entity.Order> _orders = new();
    private Entity.Client? _client;

    private double _totalPnl = 0.0;
    private double _totalCommission = 0.0;
    private double _totalSwapCosts = 0.0;
    private double _totalSpreadCosts = 0.0;

    protected async override Task OnInitializedAsync()
    {
        _orders = await _orderRepository.GetAll(692803787, ClientId);
        _deals = await _dealRepository.GetAll(this.ClientId);
        _client = await _clientRepository.GetByIdAsync(692803787, ClientId);

        _totalPnl = Math.Round(_deals.Select(f => f.Pnl).Sum(), 2);
        _totalCommission = Math.Round(_deals.Select(f => f.Commission).Sum(), 2);
        _totalSwapCosts = Math.Round(_deals.Select(f => f.Swap).Sum(), 2);
        _totalSpreadCosts = Math.Round(_deals.Select(f => f.SpreadCost).Sum(), 2);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Only on first render
        if (!firstRender || _areaChart == null)
            return;

        // Get data from database
        _deals = await _dealRepository.GetAll(this.ClientId);

        // Calculate cumulative commission for each deal
        var cumulativeCommissions = new Dictionary<DateTime, decimal>();
        decimal totalCommission = 0.0M;
        foreach (var deal in _deals.Where(f => f.AccountBalance.HasValue).OrderBy(f => f.DateCreated))
        {
            totalCommission += Convert.ToDecimal(deal.Commission);
            totalCommission += Convert.ToDecimal(deal.Swap);
            totalCommission += Convert.ToDecimal(deal.SpreadCost);
            cumulativeCommissions[deal.DateCreated] = totalCommission;
        }

        // Load the chart
        await _areaChart.InitAsync("History", _deals
            .Where(f => f.AccountBalance.HasValue && f.AccountBalance.Value > 0)
            .Select(x => new Components.Apex.AreaPoint()
                {
                    Time = x.DateCreated,
                    Price = x.AccountBalance.HasValue ? Convert.ToDecimal(x.AccountBalance.Value) : 0.0M
                }).OrderBy(f => f.Time)
                    .ToList());
    }
}
