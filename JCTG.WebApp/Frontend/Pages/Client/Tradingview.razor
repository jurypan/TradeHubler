@page "/Clients/{clientid:long}/Pairs/{symbol}/Tradingview";
@using System.Text.RegularExpressions
@implements IDisposable
@inject JCTG.WebApp.Backend.Websocket.WebsocketFrontend _websocket
@inject JCTG.WebApp.Backend.Websocket.AzurePubSubClient _pubSubClient
@inject ClientRepository _clientRepository
@inject OrderRepository _orderRepository

<h1>Tradingview</h1>

<Chart @ref=tv />

<h1>Orders</h1>
<table cellpadding="1" cellspacing="0" width="100%" style="width:100%; border:1px solid black;">
    <tr>
        <th style="width:10%;">ID</th>
        <th style="width:20%;">Symbol</th>
        <th style="width:10%;">Type</th>
        <th style="width:20%;">Open</th>
        <th style="width:10%;">PNL</th>
        <th style="width:10%;">Commission</th>
        <th style="width:10%;">Swap</th>
        <th style="width:10%;">Spreadcost</th>
    </tr>
    @foreach (var order in _orders.OrderByDescending(f => f.DateCreated))
    {
        <tr>
            <td>@order.ID</td>
            <td>@order.Symbol</td>
            <td>@order.Type</td>
            <td>@order.OpenTime</td>
            <td>@order.Pnl</td>
            <td>@order.Commission</td>
            <td>@order.Swap</td>
            <td>@order.SpreadCost.ToString("0.################")</td>
        </tr>
    }
</table>

@code {
    [Parameter]
    public long ClientId { get; set; }

    [Parameter]
    public required string Symbol { get; set; } = "BTCUSDT";

    private Chart? tv;
    private List<Order> _orders = new();

    protected async override Task OnInitializedAsync()
    {
        _orders = await _orderRepository.GetAll(692803787, ClientId, Symbol);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Only on first render
        if (!firstRender || tv == null)
            return;

        // Init tradingview Chart
        await tv.InitAsync(new()
            {
                Width = -75,
                Height = 1000,
            });

        // Get client
        var client = await _clientRepository.GetById(692803787, ClientId);

        // Get orders
        var orders = await _orderRepository.GetAll(692803787, ClientId, Symbol);

        // Do null reference check
        if (tv.IsInit && client != null)
        {
            // Init the event handler
            _websocket.SubscribeToOnGetHistoricalBarDataEvent(async (onGetHistoricalBarDataEvent) =>
            {
                // Do null reference check
                if (onGetHistoricalBarDataEvent != null
                    && onGetHistoricalBarDataEvent.ClientID > 0
                    && onGetHistoricalBarDataEvent.AccountID > 0
                    && onGetHistoricalBarDataEvent.BarData != null
                    && onGetHistoricalBarDataEvent.AccountID == 692803787
                    && onGetHistoricalBarDataEvent.ClientID == ClientId
                )
                {
                    // Inline method
                    Func<string, long?> getTimestamp = (input) =>

                    {
                        string pattern = @"\[(\d+)\]"; // Pattern to find digits inside brackets

                        Match match = Regex.Match(input, pattern);

                        if (match.Success)
                        {
                            string number = match.Groups[1].Value;
                            return long.Parse(number);
                        }
                        return null;
                    };

                    // Load the chart
                    await tv.AddCandlestickSeriesAsync(onGetHistoricalBarDataEvent.BarData.Select(x => new BarData()
                        {
                            Time = x.Time,
                            High = x.High,
                            Low = x.Low,
                            Open = x.Open,
                            Close = x.Close,
                            Color = orders.Any(f => f.Signal != null && f.Signal.EntryExpression != null && getTimestamp(f.Signal.EntryExpression) == x.Epoch) ? "#0000FF" : null
                        }).ToList());


                    // Markers
                    var markers = orders.Where(f => f.IsTradeClosed && f.CloseTime.HasValue).Select(x => new Marker()
                        {
                            Time = x.CloseTime != null ? x.CloseTime.Value : DateTime.MinValue,
                            Color = x.Pnl >= 0.0 ? "#228B22" : "#DC143C",
                            Direction = x.Type.Contains("buy") ? Marker.MarkerDirection.Buy : Marker.MarkerDirection.Sell,
                            Position = x.Type.Contains("buy") ? Marker.MarkerPosition.AboveBar : Marker.MarkerPosition.BelowBar,
                            Shape = Marker.MarkerShape.Square,
                            Text = $"Exit {x.ID}",
                        }).ToList();
                    markers.AddRange(orders.Where(f => f.IsTradeClosed && f.CloseTime.HasValue).Select(x => new Marker()
                        {
                            Time = x.OpenTime,
                            Color = x.Pnl >= 0.0 ? "#228B22" : "#DC143C",
                            Direction = x.Type.Contains("buy") ? Marker.MarkerDirection.Buy : Marker.MarkerDirection.Sell,
                            Position = x.Type.Contains("buy") ? Marker.MarkerPosition.BelowBar : Marker.MarkerPosition.AboveBar,
                            Shape = x.Type.Contains("buy") ? Marker.MarkerShape.ArrowUp : Marker.MarkerShape.ArrowDown,
                            Text = $"Entry {x.ID}",
                        }).ToList());
                    markers = markers.OrderBy(f => f.Time).ToList();

                    // Add markers to chart
                    await tv.SetMarkersToCandlestickSeriesAsync(markers);
                }
            });

            _websocket.SubscribeToOnTickEvent(async (onTickEvent) =>
            {
                // Do null reference check
                if (onTickEvent != null
                            && onTickEvent.ClientID > 0
                            && onTickEvent.AccountID > 0
                            && onTickEvent.MarketData != null
                            && onTickEvent.AccountID == 692803787
                            && onTickEvent.ClientID == ClientId
                        )
                {
                    // Get the data from the event
                    var candleData = new Tick()
                        {
                            Time = DateTime.UtcNow,
                            Price = onTickEvent.MarketData.Ask
                        };

                    // Load the chart
                    await tv.UpdateCandleStickAsync(candleData);
                }
            });

            // Send command to Metatrader
            // await _pubSubClient.SendStartListeningToTicksCommand(692803787, new Command.OnSendStartListeningToTicksCommand()
            //     {
            //         AccountID = 692803787,
            //         ClientID = ClientId,
            //         Symbol = Symbol,
            //     });

            // Send command to Metatrader
            await _pubSubClient.SendGetHistoricalBarDataAsync(692803787, new Command.OnSendGetHistoricalBarDataCommand()
                {
                    AccountID = 692803787,
                    ClientID = ClientId,
                    Symbol = Symbol,
                    Timeframe = "M5",
                    StartDate = DateTime.UtcNow.AddDays(-7),
                });
        }
    }

    public void Dispose()
    {
        // Send command to Metatrader
        // Task.Run(async () => await _pubSubClient.SendStopListeningToTicksCommand(692803787, new Command.OnSendStopListeningToTicksCommand()
        //     {
        //         AccountID = 692803787,
        //         ClientID = ClientId,
        //         Symbol = "BTCUSDT",
        //     }));
    }
}
