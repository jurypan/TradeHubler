@page "/Signals/ManualSync";
@inject TradingviewAlertRepository _tradingviewAlertRepository;
@inject SignalRepository _signalRepository;
@using JCTG.WebApp.Frontend.Components.Widget;
@using JCTG.WebApp.Frontend.Pages.Signal.Models;
@using System.Net.Http.Headers;
@using JCTG.Models;
@using System.Text.RegularExpressions

<div class="container-fluid mw-100">

    <div class="font-weight-medium shadow-none position-relative overflow-hidden mb-4">
        <div class="card-body px-0">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="font-weight-medium ">Synchronize the alerts</h4>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item">
                                <a class="text-primary text-decoration-none" href="/">
                                    Home
                                </a>
                            </li>
                            <li class="breadcrumb-item d-flex justify-content-center align-items-center ps-0">
                                <iconify-icon icon="tabler:chevron-right"></iconify-icon>
                            </li>
                            <li class="breadcrumb-item" aria-current="page">
                                <a class="text-primary text-decoration-none" href="/Signals">
                                    Signals
                                </a>
                            </li>
                            <li class="breadcrumb-item d-flex justify-content-center align-items-center ps-0">
                                <iconify-icon icon="tabler:chevron-right"></iconify-icon>
                            </li>
                            <li class="breadcrumb-item" aria-current="page">
                                Manual Sync
                            </li>
                        </ol>
                    </nav>
                </div>
                <div>
                    <LastMonthWidget></LastMonthWidget>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="card card-body">
            <h5 class="mb-3">Synchronize the alerts</h5>
            <div class="mb-3">
                <EditForm Model="@model" OnValidSubmit="@SubmitAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <AntiforgeryToken />
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Strategy</label>
                                <InputSelect class="form-select col-12" @bind-Value="model.StrategyType">
                                    <option>Choose...</option>
                                    @foreach (var item in Enum.GetValues(typeof(StrategyType)))
                                    {
                                        <option value="@item">@item</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Direction</label>
                                <InputSelect class="form-select col-12" @bind-Value="model.Direction">
                                    <option value="Long">Long</option>
                                    <option value="Short">Short</option>
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Ticker</label>
                                <InputText class="form-control" @bind-Value="model.Ticker" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="formFile" class="form-label">Timeframe</label>
                                <InputSelect class="form-select col-12" @bind-Value="model.Timeframe">
                                    <option value="5M">5 Min</option>
                                    <option value="10M">10 Min</option>
                                    <option value="15M">15 Min</option>
                                    <option value="20M">20 Min</option>
                                    <option value="30M">30 Min</option>
                                    <option value="45M">45 Min</option>
                                    <option value="1H">1 Hour</option>
                                    <option value="2H">2 Hour</option>
                                    <option value="5H">4 Hour</option>
                                    <option value="6H">6 Hour</option>
                                    <option value="12H">12 Hour</option>
                                    <option value="1D">1 Day</option>
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label for="formFile" class="form-label">CSV File</label>
                                <InputFile class="form-control" OnChange="HandleFileUpload"></InputFile>
                            </div>
                        </div>
                    </div>
                    @if (model.Items.Count > 0)
                    {
                        <div class="row">
                            <div class="form-actions">
                                <div class="card-body border-top">
                                    <button type="submit" class="btn btn-success rounded-pill px-4">
                                        Sync
                                    </button>
                                    <button type="button" class="btn bg-danger-subtle text-danger rounded-pill px-4 ms-6">
                                        Cancel
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </EditForm>
            </div>
        </div>
    </div>

    @if (model != null && model.Items.Count > 0)
    {
        <div class="row">
            <div class="datatables">
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-body">
                                <div class="mb-2">
                                    <h5 class="mb-0">Logs</h5>
                                </div>
                                <div class="table-responsive">
                                    <table class="table border table-striped table-bordered display text-nowrap">
                                        <thead>
                                            <tr>
                                                <th>Magic</th>
                                                <th>Date</th>
                                                <th>Exit RR</th>
                                                <th>Comment</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var log in model.Items)
                                            {
                                                <tr>
                                                    <td>@log.Magic</td>
                                                    <td>@log.Date</td>
                                                    <td>@log.ExitRR</td>
                                                    <td>@log.Comment</td>
                                                    <td>
                                                        @if (log.Action == CrudState.Add)
                                                        {
                                                            <a class="d-flex align-items-center gap-3" @onclick="async () => await AddSignalAsync(log)">
                                                                Add
                                                            </a>
                                                        }
                                                        else if (log.Action == CrudState.Edit)
                                                        {
                                                            <a class="d-flex align-items-center gap-3" @onclick="async () => await UpdateSignalAsync(log)">
                                                                Edit
                                                            </a>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                        <tfoot>
                                            <tr>
                                                <th>Magic</th>
                                                <th>Date</th>
                                                <th>Exit RR</th>
                                                <th>Comment</th>
                                                <th></th>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

</div>


@code {

    [SupplyParameterFromForm]
    private TradingviewImport model { get; set; } = new();


    private async Task UpdateSignalAsync(TradingviewImportItem item)
    {
        // Do null reference check
        if(item != null && item.SignalId.HasValue && item.ExitRR.HasValue)
        {
            // Get signal from database
            var signal = await _signalRepository.GetById(692803787, item.SignalId.Value);

            // Do null reference check
            if(signal != null)
            {
                // Update properties
                signal.ExitRiskRewardRatio = item.ExitRR;
                if (item.ExitRR.Value == -1)
                    signal.TradingviewStateType = TradingviewStateType.SlHit;
                else if(item.ExitRR.Value == 0)
                    signal.TradingviewStateType = TradingviewStateType.BeHit;
                else if (signal.RiskRewardRatio.HasValue && item.ExitRR.Value == signal.RiskRewardRatio.Value)
                    signal.TradingviewStateType = TradingviewStateType.TpHit;
                else
                    signal.TradingviewStateType = TradingviewStateType.CloseAll;

                // Update signal
                await _signalRepository.EditAsync(signal);

                // Update item
                item.Comment = string.Empty;
                item.Action = CrudState.None;
            }
        }
    }

    private async Task AddSignalAsync(TradingviewImportItem item)
    {
        // Do null reference check
        if (item != null && item.SignalId.HasValue && item.ExitRR.HasValue)
        {
            // Get signal from database
            var signal = new Signal()
                {
                    AccountID = 692803787,

                };

            // Do null reference check
            if (signal != null)
            {
                // Update properties
                signal.ExitRiskRewardRatio = item.ExitRR;
                if (item.ExitRR.Value == -1)
                    signal.TradingviewStateType = TradingviewStateType.SlHit;
                else if (item.ExitRR.Value == 0)
                    signal.TradingviewStateType = TradingviewStateType.BeHit;

                // Update signal
                await _signalRepository.AddAsync(signal);
            }
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        try
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(10485760)); // 10MB limit
            string text = await fileContent.ReadAsStringAsync();
            string[] lines = text.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);

            for (var i = 0; i < lines.Count(); i++)
            {
                if (i != 0)
                {
                    var values = lines[i].Split(',');
                    if (values[1].Contains("Entry"))
                    {
                        var item = model.Items.FirstOrDefault(f => f.ID == int.Parse(values[0]));
                        if (item != null)
                        {
                            item.Date = DateTime.Parse(values[3]);
                            item.Magic = int.Parse(values[2]);
                        }
                        else
                        {
                            model.Items.Add(new TradingviewImportItem()
                                {
                                    ID = int.Parse(values[0]),
                                    Date = DateTime.Parse(values[3]),
                                    Magic = int.Parse(values[2])
                                });
                        }

                    }
                    else if (values[1].Contains("Exit"))
                    {
                        var item = model.Items.FirstOrDefault(f => f.ID == int.Parse(values[0]));
                        if (item != null)
                        {
                            item.ExitRR = double.Parse(values[2]);
                        }
                        else
                        {
                            model.Items.Add(new TradingviewImportItem()
                                {
                                    ID = int.Parse(values[0]),
                                    ExitRR = double.Parse(values[2]),
                                });
                        }

                    }
                }
            }

            model.Items = model.Items.OrderByDescending(f => f.Date).ToList();
        }
        catch (Exception ex)
        {

        }
    }

    private async Task SubmitAsync()
    {
        // Get signals out of database
        var signals = await _signalRepository.GetAllByInstrumentAndStrategyType(692803787, model.Ticker, model.StrategyType);

        // Forech signal
        foreach(var item in model.Items)
        {
            // Get signal based on magic
            var signal = signals.FirstOrDefault(f => f.Magic == item.Magic);

            // Do null reference check
            if(signal != null)
            {
                // Check Exit RR is the same
                if(signal.ExitRiskRewardRatio.HasValue)
                {
                    if(signal.ExitRiskRewardRatio.Value == item.ExitRR)
                    {

                    }
                    else
                    {
                        item.Comment = $"Exit RR in database is {signal.ExitRiskRewardRatio} and in tradingview export is it {item.ExitRR}";
                        item.Action = CrudState.Edit;
                        item.SignalId = signal.ID;
                    }
                }
                else
                {
                    item.Comment = $"No Exit RR in database";
                    item.Action = CrudState.Edit;
                    item.SignalId = signal.ID;
                }
            }
            else
            {
                item.Comment = $"Trade was not found in database";
                item.Action = CrudState.Add;
            }
        }
    }
}
