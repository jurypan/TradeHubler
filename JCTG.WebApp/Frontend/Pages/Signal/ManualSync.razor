@page "/Signals/ManualSync";
@inject TradingviewAlertRepository _tradingviewAlertRepository;
@inject SignalRepository _signalRepository;
@inject StrategyRepository _strategyRepository;
@using JCTG.WebApp.Frontend.Components.Widget;
@using JCTG.WebApp.Frontend.Components.Modal;
@using JCTG.WebApp.Frontend.Pages.Signal.Models;
@using System.Net.Http.Headers;
@using JCTG.Models;
@using System.Text.RegularExpressions

<div class="container-fluid mw-100">

    <div class="font-weight-medium shadow-none position-relative overflow-hidden mb-4">
        <div class="card-body px-0">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="font-weight-medium ">Synchronize the alerts</h4>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item">
                                <a class="text-primary text-decoration-none" href="/">
                                    Home
                                </a>
                            </li>
                            <li class="breadcrumb-item d-flex justify-content-center align-items-center ps-0">
                                <iconify-icon icon="tabler:chevron-right"></iconify-icon>
                            </li>
                            <li class="breadcrumb-item" aria-current="page">
                                <a class="text-primary text-decoration-none" href="/Signals">
                                    Signals
                                </a>
                            </li>
                            <li class="breadcrumb-item d-flex justify-content-center align-items-center ps-0">
                                <iconify-icon icon="tabler:chevron-right"></iconify-icon>
                            </li>
                            <li class="breadcrumb-item" aria-current="page">
                                Manual Sync
                            </li>
                        </ol>
                    </nav>
                </div>
                <div>
                    <LastMonthWidget></LastMonthWidget>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="card card-body">
            <h5 class="mb-3">Synchronize the alerts</h5>
            <div class="mb-3">
                <EditForm Model="@model" OnValidSubmit="@ReloadAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <AntiforgeryToken />
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Strategy</label>
                                <InputSelect class="form-select col-12" @bind-Value="model.StrategyID">
                                    <option>Choose...</option>
                                    @foreach (var item in strategies)
                                    {
                                        <option value="@item.ID">@item.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Ticker</label>
                                <InputText class="form-control" @bind-Value="model.Ticker" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="formFile" class="form-label">TakeProfit</label>
                                <InputText class="form-control" @bind-Value="model.TakeProfitAsString" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="formFile" class="form-label">Order Type</label>
                                <InputSelect class="form-select col-12" @bind-Value="model.OrderType">
                                    <option>Choose...</option>
                                    <option value="BUY">Long</option>
                                    <option value="SELL">Short</option>
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="formFile" class="form-label">CSV File</label>
                                <InputFile class="form-control" OnChange="HandleFileUpload"></InputFile>
                            </div>
                        </div>
                    </div>
                    @if (model.Items.Count > 0)
                    {
                        <div class="p-3 border-top">
                            <div>
                                <div class="mb-3 mb-0 text-end">
                                    <button type="submit" class="btn btn-primary rounded-pill px-4">Sync</button>
                                </div>
                            </div>
                        </div>
                    }
                </EditForm>
            </div>
        </div>
    </div>

    @if (model != null && model.Items.Count > 0)
    {
        <div class="row">
            <div class="datatables">
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div>
                                        <h4 class="card-title">Tradingview export</h4>
                                        <h5 class="card-subtitle">Overview of Tradingview export CSV file</h5>
                                    </div>
                                    <div class="ms-auto d-flex align-items-center">
                                        <ul class="list-inline fs-2 dl me-2">
                                            <li class="list-inline-item">
                                                <button type="button" class="btn btn-primary rounded-pill px-4" @onclick="async () => await AutoUpdateAllSignalsFromFileClickAsync()">Auto update</button>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="table-responsive">
                                    <table class="table border table-striped table-bordered display text-nowrap">
                                        <thead>
                                            <tr>
                                                <th>Magic</th>
                                                <th>Date</th>
                                                <th>File Exit RR</th>
                                                <th>Signal Exit RR</th>
                                                <th>Signal State</th>
                                                <th>Comment</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var log in model.Items)
                                            {
                                                <tr>
                                                    <td>@log.Magic</td>
                                                    <td>@log.Date</td>
                                                    <td>@log.ExitRR</td>
                                                    <td>
                                                        @{
                                                            if (log.Signal != null)
                                                            {
                                                                <span>@log.Signal.ExitRiskRewardRatio</span>
                                                            }
                                                        }
                                                    </td>
                                                    <td>
                                                        @{
                                                            if (log.Signal != null)
                                                            {
                                                                @if (log.Signal.SignalStateType == SignalStateType.Init)
                                                                {
                                                                    <span class="mb-1 badge rounded-pill  bg-primary-subtle text-primary">Init</span>
                                                                }
                                                                else if (log.Signal.SignalStateType == SignalStateType.Entry)
                                                                {
                                                                    <span class="mb-1 badge rounded-pill  bg-secondary-subtle text-secondary">Entry</span>
                                                                }
                                                                else if (log.Signal.SignalStateType == SignalStateType.BeHit)
                                                                {
                                                                    <span class="mb-1 badge rounded-pill  bg-warning-subtle text-warning">BE</span>
                                                                }
                                                                else if (log.Signal.SignalStateType == SignalStateType.SlHit)
                                                                {
                                                                    <span class="mb-1 badge rounded-pill  bg-danger-subtle text-danger">SL</span>
                                                                }
                                                                else if (log.Signal.SignalStateType == SignalStateType.TpHit)
                                                                {
                                                                    <span class="mb-1 badge rounded-pill  bg-success-subtle text-success">TP</span>
                                                                }
                                                                else if (log.Signal.SignalStateType == SignalStateType.CancelOrder)
                                                                {
                                                                    <span class="mb-1 badge rounded-pill  bg-info-subtle text-info">Cancelled</span>
                                                                }
                                                                else if (log.Signal.SignalStateType == SignalStateType.CloseAll)
                                                                {
                                                                    <span class="mb-1 badge rounded-pill  bg-info-subtle text-info">Close</span>
                                                                }
                                                            }
                                                        }
                                                    </td>
                                                    <td>@log.Comment</td>
                                                    <td>
                                                        @if (log.Signal != null || log.Action == CrudState.Add || log.Action == CrudState.Edit)
                                                        {
                                                            <div class="dropdown dropstart">
                                                                <a href="#" class="text-muted" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                                                    <i class="ti ti-dots-vertical fs-6"></i>
                                                                </a>
                                                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                                                    @if (log.Signal != null)
                                                                    {
                                                                        <li>
                                                                            <a class="dropdown-item d-flex align-items-center gap-3" href="/Signals/@log.Signal.ID/Orders">
                                                                                Orders
                                                                            </a>
                                                                        </li>
                                                                        <li>
                                                                            <a class="dropdown-item d-flex align-items-center gap-3" @onclick="() => EditASignalClick(log.Signal.ID)">
                                                                                Edit Signal
                                                                            </a>
                                                                        </li>
                                                                    }
                                                                    @if (log.Action == CrudState.Add)
                                                                    {
                                                                        <li>
                                                                            <a class="dropdown-item d-flex align-items-center gap-3" @onclick="async () => await AutoAddASignalFromFileClickAsync(log)">
                                                                                Auto add form file
                                                                            </a>
                                                                        </li>
                                                                    }
                                                                    else if (log.Action == CrudState.Edit)
                                                                    {
                                                                        <li>
                                                                            <a class="dropdown-item d-flex align-items-center gap-3" @onclick="async () => await AutoUpdateASignalFromFileClickAsync(log)">
                                                                                Auto update form file
                                                                            </a>
                                                                        </li>
                                                                    }
                                                                </ul>
                                                            </div>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                        <tfoot>
                                            <tr>
                                                <th>Magic</th>
                                                <th>Date</th>
                                                <th>Exit RR</th>
                                                <th>Signal TV Exit RR</th>
                                                <th>Signal TV State</th>
                                                <th>Comment</th>
                                                <th></th>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (_exception != null)
    {
        <div class="alert customize-alert alert-dismissible alert-light-danger bg-danger-subtle text-danger fade show remove-close-icon" role="alert">
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            <div class="d-flex align-items-center  me-3 me-md-0">
                <i class="ti ti-info-circle fs-5 me-2 text-danger"></i>
                @_exception.Message
                @if (_exception.InnerException != null)
                {
                    <br />
                    @_exception.InnerException.Message
                }
            </div>
        </div>
    }


</div>

<SignalAddOrEditModal @ref="@_signalAddOrEditModal" OnClose="async () => await ReloadAsync()"></SignalAddOrEditModal>

@code {

    [SupplyParameterFromForm]
    private TradingviewImport model { get; set; } = new();
    private SignalAddOrEditModal? _signalAddOrEditModal { get; set; } = null;
    private Exception? _exception { get; set; } = null;
    private List<Strategy> strategies { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        strategies = await _strategyRepository.GetAllAsync(692803787);
    }

    private async Task AutoUpdateAllSignalsFromFileClickAsync()
    {
        foreach (var item in model.Items)
        {
            if (item.Action == CrudState.Edit && item.Signal != null && item.ExitRR.HasValue)
            {
                await AutoUpdateASignalFromFileClickAsync(item);
            }
        }
    }

    private async Task AutoUpdateASignalFromFileClickAsync(TradingviewImportItem item)
    {
        // Do null reference check
        if (item != null && item.Signal != null && item.ExitRR.HasValue)
        {
            // Get signal from database
            var signal = await _signalRepository.GetByIdAsync(692803787, item.Signal.ID);

            // Do null reference check
            if (signal != null)
            {
                // Update properties
                signal.ExitRiskRewardRatio = item.ExitRR;
                if (item.ExitRR.Value == -1)
                    signal.SignalStateType = SignalStateType.SlHit;
                else if (item.ExitRR.Value == 0)
                    signal.SignalStateType = SignalStateType.BeHit;
                else if (item.ExitRR.Value == model.TakeProfit)
                    signal.SignalStateType = SignalStateType.TpHit;
                else
                    signal.SignalStateType = SignalStateType.CloseAll;

                // Update signal
                await _signalRepository.EditAsync(signal);

                // Update item
                item.Comment = string.Empty;
                item.Action = CrudState.None;
                item.Signal = signal;
            }
        }
    }

    private async Task AutoAddASignalFromFileClickAsync(TradingviewImportItem item)
    {
        // Do null reference check
        if (item != null && item.Signal != null && item.ExitRR.HasValue)
        {
            // Get signal from database
            var signal = new Signal()
                {
                    AccountID = 692803787,

                };

            // Do null reference check
            if (signal != null)
            {
                // Update properties
                signal.ExitRiskRewardRatio = item.ExitRR;
                if (item.ExitRR.Value == -1)
                    signal.SignalStateType = SignalStateType.SlHit;
                else if (item.ExitRR.Value == 0)
                    signal.SignalStateType = SignalStateType.BeHit;

                // Update signal
                await _signalRepository.AddAsync(signal);
            }
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        model.Items = new();
        _exception = null;

        try
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(10485760)); // 10MB limit
            string text = await fileContent.ReadAsStringAsync();
            string[] lines = text.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);

            for (var i = 0; i < lines.Count(); i++)
            {
                if (i != 0)
                {
                    var values = lines[i].Split(',');
                    if (values[1].Contains("Entry"))
                    {
                        var item = model.Items.FirstOrDefault(f => f.ID == int.Parse(values[0]));
                        if (item != null)
                        {
                            item.Date = DateTime.Parse(values[3]);
                            item.Magic = int.Parse(values[2]);
                        }
                    }
                    else if (values[1].Contains("Exit"))
                    {
                        if (values[2] != "Open")
                        {
                            var item = model.Items.FirstOrDefault(f => f.ID == int.Parse(values[0]));
                            if (item != null)
                            {
                                item.ExitRR = double.Parse(values[2]);
                            }
                            else
                            {
                                model.Items.Add(new TradingviewImportItem()
                                    {
                                        ID = int.Parse(values[0]),
                                        ExitRR = double.Parse(values[2]),
                                    });
                            }
                        }
                    }
                }
            }

            model.Items = model.Items.OrderByDescending(f => f.Date).ToList();
            await ReloadAsync();
        }
        catch (Exception ex)
        {
            _exception = ex;
        }
    }

    private async Task ReloadAsync()
    {
        // Get signals out of database
        var signals = await _signalRepository.GetAllByInstrumentAndStrategyType(692803787, model.Ticker, model.OrderType, model.StrategyID);

        // Forech signal
        foreach (var item in model.Items)
        {
            // Get signal based on magic
            var signal = signals.FirstOrDefault(f => f.Magic == item.Magic);

            // Do null reference check
            if (signal != null)
            {
                // Put signal in object
                item.Signal = signal;

                // Check Exit RR is the same
                if (signal.ExitRiskRewardRatio.HasValue)
                {
                    if (signal.ExitRiskRewardRatio == item.ExitRR)
                    {
                        if(signal.ExitRiskRewardRatio == -1 && signal.SignalStateType != SignalStateType.SlHit)
                        {
                            item.Comment = $"SignalStateType in database is {signal.SignalStateType} and should be {SignalStateType.SlHit}";
                            item.Action = CrudState.Edit;
                        }
                        else if (signal.ExitRiskRewardRatio == model.TakeProfit && signal.SignalStateType != SignalStateType.TpHit)
                        {
                            item.Comment = $"SignalStateType in database should be {SignalStateType.TpHit} because ExitRiskRewardRatio is equal to Take Profit";
                            item.Action = CrudState.Edit;
                        }
                        else
                        {
                            item.Comment = "OK";
                            item.Action = CrudState.None;
                        }
                    }
                    else
                    {
                        item.Comment = $"Exit RR in database is {signal.ExitRiskRewardRatio} and in tradingview export is it {item.ExitRR}";
                        item.Action = CrudState.Edit;
                    }
                }
                else
                {
                    item.Comment = $"No Exit RR in database";
                    item.Action = CrudState.Edit;
                }
            }
            else
            {
                item.Comment = $"Trade was not found in database";
                item.Action = CrudState.Add;
                item.Signal = null;
            }
        }
    }

    private async Task EditASignalClick(long id)
    {
        if (_signalAddOrEditModal != null)
        {
            await _signalAddOrEditModal.InitAsync(692803787, id);
        }
    }
}
