@page "/Signals/{signalid:long}/Orders";
@inject SignalRepository _signalRepository;
@inject OrderRepository _orderRepository;
@inject MarketAbstentionRepository _marketAbstentionRepository;
@inject LogRepository _logRepository;
@inject JCTG.WebApp.Backend.Queue.AzureQueueClient _server;
@using JCTG.WebApp.Frontend.Components.Modal;
@using JCTG.WebApp.Frontend.Components.Widget;
@using JCTG.WebApp.Backend.Helpers;
@using JCTG.Command;

<div class="container-fluid mw-100">

    <div class="font-weight-medium shadow-none position-relative overflow-hidden mb-4">
        <div class="card-body px-0">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="font-weight-medium ">Joeri</h4>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item">
                                <a class="text-primary text-decoration-none" href="/">
                                    Home
                                </a>
                            </li>
                            <li class="breadcrumb-item d-flex justify-content-center align-items-center ps-0">
                                <iconify-icon icon="tabler:chevron-right"></iconify-icon>
                            </li>
                            <li class="breadcrumb-item" aria-current="page">
                                <a class="text-primary text-decoration-none" href="/Signals">
                                    Signal @SignalId
                                </a>
                            </li>
                            <li class="breadcrumb-item d-flex justify-content-center align-items-center ps-0">
                                <iconify-icon icon="tabler:chevron-right"></iconify-icon>
                            </li>
                            <li class="breadcrumb-item" aria-current="page">
                                Orders
                            </li>
                        </ol>
                    </nav>
                </div>
                <div>
                    <LastMonthWidget></LastMonthWidget>
                </div>
            </div>
        </div>
    </div>

    <div class="card w-100 position-relative overflow-hidden">
        <div class="card card-body">
            <div class="row">
                <div class="col-md-4 col-xl-3">
                    <h5 class="card-title fw-semibold mb-0 lh-sm">Orders</h5>
                </div>
                <div class="col-md-8 col-xl-9 text-end d-flex justify-content-md-end justify-content-center mt-3 mt-md-0">
                    <a href="javascript:void(0)" class="btn btn-primary d-flex align-items-center" @onclick="() => OrderAddClick()">Add an order</a>
                </div>
            </div>
            @if (_orders.Count() > 0)
            {
                <div class="card-body p-4">
                    <div class="table-responsive rounded-2 mb-4">
                        <table class="table border text-nowrap customize-table mb-0 align-middle">
                            <thead class="text-dark fs-4">
                                <tr>
                                    <th>ID</th>
                                    <th>Client</th>
                                    <th>Symbol</th>
                                    <th>Type</th>
                                    <th>Magic</th>
                                    <th>Pnl</th>
                                    <th>Lot Size</th>
                                    <th>Risk Amount</th>
                                    <th>TV State Type</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var order in _orders)
                                {
                                    <tr>
                                        <td>@order.ID</td>
                                        <td>@order.Client?.Name</td>
                                        <td>@order.Symbol</td>
                                        <td>@order.Type</td>
                                        <td>@order.Magic</td>
                                        <td>@order.Pnl</td>
                                        <td><a href="javascript:void(0)" @onclick="async () => await OrderLotSizeClick(order.ClientID, order.SignalID)">@order.OpenLots</a></td>
                                        <td>@(_logs.Count(f => f.ClientID == order.ClientID && f.Description != null && f.Message != null && f.Message.Contains("LotSizeCalculated")) == 1 ? _logs.First(f => f.ClientID == order.ClientID && f.Description != null && f.Message != null && f.Message.Contains("LotSizeCalculated")).Description?.GetRiskAmount().ToString() : "?")</td>
                                        <td>@order.Signal.SignalStateType</td>
                                        <td>
                                            <div class="dropdown dropstart">
                                                <a href="#" class="text-muted" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="ti ti-dots-vertical fs-6"></i>
                                                </a>
                                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                                    <li>
                                                        <a href="javascript:void(0)" class="dropdown-item d-flex align-items-center gap-3" @onclick="async () => await OrderEditClick(order.ID)">Edit</a>
                                                    </li>
                                                    <li>
                                                        <a href="javascript:void(0)" class="dropdown-item d-flex align-items-center gap-3" @onclick="async () => await OrderDeleteClick(order.ID)">Delete</a>
                                                    </li>
                                                    <li>
                                                        <a href="javascript:void(0)" class="dropdown-item d-flex align-items-center gap-3" @onclick="async () => await OrderCloseClick(order.ID)">Close order cmd</a>
                                                    </li>
                                                    <li>
                                                        <a href="/Signals/@order.SignalID/Order/@order.ID/Deals" class="dropdown-item d-flex align-items-center gap-3">Deals</a>
                                                    </li>
                                                    <li>
                                                        <a href="javascript:void(0)" class="dropdown-item d-flex align-items-center gap-3" @onclick="async () => await OrderLotSizeClick(order.ClientID, order.SignalID)">Lot Calculation</a>
                                                    </li>
                                                    <li>
                                                        <a href="javascript:void(0)" class="dropdown-item d-flex align-items-center gap-3" @onclick="async () => await OrderLogClick(order.ClientID, order.SignalID)">Log</a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
            else
            {
                <div class="card-body text-center">
                    <h3 class="fw-semibold">No orders available for this signal</h3>
                    <p class="fw-normal mb-4 fs-4">Is this correct? Are you sure your signal hasn't entered a trade yet?</p>
                    <a href="javascript:void(0)" class="btn btn-primary mb-8" @onclick="() => OrderAddClick()">Add an order</a>
                </div>
            }

        </div>
    </div>

    <div class="card w-100 position-relative overflow-hidden">
        <div class="card card-body">
            <div class="row">
                <div class="col-md-4 col-xl-3">
                    <h5 class="card-title fw-semibold mb-0 lh-sm">Market Abstention</h5>
                </div>
                <div class="col-md-8 col-xl-9 text-end d-flex justify-content-md-end justify-content-center mt-3 mt-md-0">
                    <a href="javascript:void(0)" class="btn btn-primary d-flex align-items-center" @onclick="() => MarketAbstentionAddClick()">Add a Market Abstention</a>
                </div>
            </div>
            @if (_marketAbstentions.Count() > 0)
            {
                <div class="card-body p-4">
                    <div class="table-responsive rounded-2 mb-4">
                        <table class="table border text-nowrap customize-table mb-0 align-middle">
                            <thead class="text-dark fs-4">
                                <tr>
                                    <th>ID</th>
                                    <th>Client</th>
                                    <th>Symbol</th>
                                    <th>Type</th>
                                    <th>Magic</th>
                                    <th>Message</th>
                                    <th>TV State Type</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var marketAbstention in _marketAbstentions)
                                {
                                    <tr>
                                        <td>@marketAbstention.ID</td>
                                        <td>@marketAbstention.Client?.Name</td>
                                        <td>@marketAbstention.Symbol</td>
                                        <td>@marketAbstention.Type</td>
                                        <td>@marketAbstention.Magic</td>
                                        <td>@marketAbstention.LogMessage</td>
                                        <td>@marketAbstention.Signal.SignalStateType</td>
                                        <td>
                                            <div class="dropdown dropstart">
                                                <a href="#" class="text-muted" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="ti ti-dots-vertical fs-6"></i>
                                                </a>
                                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                                    <li>
                                                        <a href="javascript:void(0)" class="dropdown-item d-flex align-items-center gap-3" @onclick="async () => await MarketAbstentionEditClick(marketAbstention.ID)">Edit</a>
                                                    </li>
                                                    <li>
                                                        <a href="javascript:void(0)" class="dropdown-item d-flex align-items-center gap-3" @onclick="async () => await MarketAbstentionDeleteClick(marketAbstention.ID)">Delete</a>
                                                    </li>
                                                    <li>
                                                        <a href="javascript:void(0)" class="dropdown-item d-flex align-items-center gap-3" @onclick="async () => await OrderLogClick(marketAbstention.ClientID, marketAbstention.SignalID)">Log</a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
            else
            {
                <div class="card-body text-center">
                    <h3 class="fw-semibold">No market abstentions available for this signal</h3>
                    <p class="fw-normal mb-4 fs-4">You are doing a great job!</p>
                    <a href="javascript:void(0)" class="btn btn-primary mb-8" @onclick="() => MarketAbstentionAddClick()">Add a Market Abstention</a>
                </div>
            }
        </div>

    </div>
</div>

<OrderAddOrEditModal @ref="@_orderAddOrEditModal" OnClose="async () => await ReloadAsync()"></OrderAddOrEditModal>

<OrderDeleteModal @ref="@_orderDeleteModal" OnClose="async () => await ReloadAsync()"></OrderDeleteModal>

<MarketAbstentionAddOrEditModal @ref="@_marketAbstentionAddOrEditModal" OnClose="async () => await ReloadAsync()"></MarketAbstentionAddOrEditModal>

<MarketAbstentionDeleteModal @ref="@_marketAbstentionDeleteModal" OnClose="async () => await ReloadAsync()"></MarketAbstentionDeleteModal>

<OrderLogModal @ref="@_orderLogModal"></OrderLogModal>

<OrderLotSizeModal @ref="@_orderLotSizeModal"></OrderLotSizeModal>

@code {

    [Parameter]
    public long SignalId { get; set; }

    private OrderAddOrEditModal? _orderAddOrEditModal { get; set; } = null;
    private OrderDeleteModal? _orderDeleteModal { get; set; } = null;
    private MarketAbstentionAddOrEditModal? _marketAbstentionAddOrEditModal { get; set; } = null;
    private MarketAbstentionDeleteModal? _marketAbstentionDeleteModal { get; set; } = null;
    private OrderLogModal? _orderLogModal { get; set; } = null;
    private OrderLotSizeModal? _orderLotSizeModal { get; set; } = null;


    private List<Entity.Order> _orders = new List<Entity.Order>();
    private List<Entity.MarketAbstention> _marketAbstentions = new List<Entity.MarketAbstention>();
    private List<Entity.Log> _logs = new List<Entity.Log>();

    protected async override Task OnInitializedAsync()
    {
        await ReloadAsync();
    }

    private async Task ReloadAsync()
    {
        _orders = await _orderRepository.GetAllBySignalId(692803787, SignalId);
        _marketAbstentions = await _marketAbstentionRepository.GetAllBySignalId(692803787, SignalId);
        _logs = await _logRepository.GetAll(692803787, SignalId);
    }


    private async Task OrderLogClick(long? clientId, long signalId)
    {
        if (_orderLogModal != null && clientId.HasValue)
        {
            await _orderLogModal.InitAsync(692803787, clientId.Value, signalId);
        }
    }

    private async Task OrderLotSizeClick(long? clientId, long signalId)
    {
        if (_orderLotSizeModal != null && clientId.HasValue)
        {
            await _orderLotSizeModal.InitAsync(692803787, clientId.Value, signalId);
        }
    }

    private async Task OrderAddClick()
    {
        if (_orderAddOrEditModal != null)
        {
            await _orderAddOrEditModal.InitAsync(692803787);
        }
    }

    private async Task OrderEditClick(long orderId)
    {
        if (_orderAddOrEditModal != null)
        {
            await _orderAddOrEditModal.InitAsync(692803787, orderId);
        }
    }

    private async Task OrderDeleteClick(long orderId)
    {
        if (_orderDeleteModal != null)
        {
            await _orderDeleteModal.InitAsync(692803787, orderId);
        }
    }

    private async Task MarketAbstentionAddClick()
    {
        if (_marketAbstentionAddOrEditModal != null)
        {
            await _marketAbstentionAddOrEditModal.InitAsync(692803787);
        }
    }

    private async Task MarketAbstentionEditClick(long marketAbstentionId)
    {
        if (_marketAbstentionAddOrEditModal != null)
        {
            await _marketAbstentionAddOrEditModal.InitAsync(692803787, marketAbstentionId);
        }
    }

    private async Task MarketAbstentionDeleteClick(long marketAbstentionId)
    {
        if (_marketAbstentionDeleteModal != null)
        {
            await _marketAbstentionDeleteModal.InitAsync(692803787, marketAbstentionId);
        }
    }

    private async Task OrderCloseClick(long orderId)
    {
        // Get deal from database
        var order = await _orderRepository.GetById(692803787, orderId);

        // Do null reference check
        if (order != null)
        {
            // Get signal from database
            var signal = await _signalRepository.GetByIdAsync(692803787, order.SignalID);

            // Do null reference check
            if (signal != null)
            {
                // Create model and send to the client
                var id = await _server.SendOnTradingviewSignalCommandAsync(signal.AccountID, OnSendTradingviewSignalCommand.Close(
                        signalId: signal.ID,
                        accountId: signal.AccountID,
                        instrument: signal.Instrument,
                        strategyId: signal.StrategyID,
                        clientIds: new List<long>() { order.ClientID }
                    ));
            }
        }
    }
}
