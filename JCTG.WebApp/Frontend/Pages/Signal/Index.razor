@page "/Signals";
@inject SignalRepository _signalRepository;
@using JCTG.Models;

<h3>Signals</h3>
@if (_signals.Count() <= 0)
{
    <p>No signals available</p>
}
else
{
    <div class="row">
        <select @onchange="FilterChanged">
            <option value="0">All</option>
            @foreach (var strategy in Enum.GetValues(typeof(StrategyType)))
            {
                <option value="@((int)strategy)">@strategy</option>
            }
        </select>

    </div>

    <br />

    <div class="row">
        @foreach (var signal in _signals)
        {
            <div class="col-md-3 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@signal.Instrument @signal.OrderType</h5>
                        <p class="card-text">@signal.DateCreated</p>
                        <p class="card-text">@signal.StrategyType</p>
                        <p class="card-text">@signal.TradingviewStateType</p>
                        <div>
                            <a href="@($"Signals/{signal.ID}/Orders")"> View trading Journal</a>
                        </div>
                        <div>
                            <a href="@($"Signals/{signal.ID}/History")"> View logs</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Entity.Signal> _signals = new ();

    protected override async Task OnInitializedAsync()
    {
        _signals = await _signalRepository.GetAll(692803787);
    }

    private async Task FilterChanged(ChangeEventArgs e)
    {
        if (!int.TryParse(e.Value?.ToString(), out int strategyValue))
        {
            _signals = await _signalRepository.GetAll(692803787);
        }
        else
        {
            var strategy = (StrategyType)strategyValue;
            if (strategy == StrategyType.None)
            {
                _signals = await _signalRepository.GetAll(692803787);
            }
            else
            {
                _signals = await _signalRepository.GetAllByStrategy(692803787, strategy);
            }
        }

        StateHasChanged();
    }
}
