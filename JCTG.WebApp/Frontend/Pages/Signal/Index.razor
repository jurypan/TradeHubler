@page "/Signals";
@inject SignalRepository _signalRepository;
@inject JCTG.WebApp.Backend.Websocket.AzurePubSubClient _server;
@using JCTG.WebApp.Frontend.Components.Modal;
@using JCTG.Command;
@using JCTG.Models;

<div class="container-fluid mw-100">

    <div class="font-weight-medium shadow-none position-relative overflow-hidden mb-4">
        <div class="card-body px-0">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="font-weight-medium ">Signals</h4>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item">
                                <a class="text-primary text-decoration-none" href="/">
                                    Home
                                </a>
                            </li>
                            <li class="breadcrumb-item d-flex justify-content-center align-items-center ps-0">
                                <iconify-icon icon="tabler:chevron-right"></iconify-icon>
                            </li>
                            <li class="breadcrumb-item" aria-current="page">
                                <a class="text-primary text-decoration-none" href="/">
                                    Signals
                                </a>
                            </li>
                        </ol>
                    </nav>
                </div>
                <div>
                    <div class="d-flex no-block justify-content-end align-items-center">
                        <div class="me-2">
                            <div class="breadbar"></div>
                        </div>
                        <div class="">
                            <small>LAST MONTH</small>
                            <h4 class="text-primary mb-0 font-medium">$58,256</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row card w-100 position-relative overflow-hidden">
        <div class="px-4 py-3 border-bottom">
            <h5 class="card-title fw-semibold mb-0 lh-sm">Filters</h5>
        </div>
        <ul class="nav nav-pills card-body p-4">
            @foreach (StrategyType strategy in Enum.GetValues(typeof(StrategyType)))
            {
                <li class="nav-item">
                    <a @onclick="async () => await ClickStrategyTypeFilterAsync(strategy)" class="nav-link note-link d-flex align-items-center justify-content-center px-3 px-md-3 me-0 me-md-2 text-body-color btn  @(_filterStrategyType != null && _filterStrategyType == strategy ? "active" : "")">
                        <iconify-icon icon="tabler:list" class="fill-white me-0 me-md-1"></iconify-icon>
                        <span class="d-none d-md-block font-weight-medium">@strategy</span>
                    </a>
                </li>
            }
        </ul>
        <ul class="nav nav-pills card-body p-4">
            <li class="nav-item">
                <a @onclick="async () => await ClickInstrumentFilterAsync(null)" class="nav-link note-link d-flex align-items-center justify-content-center px-3 px-md-3 me-0 me-md-2 text-body-color btn  @(_filterInstrument == null ? "active" : "")">
                    <iconify-icon icon="tabler:list" class="fill-white me-0 me-md-1"></iconify-icon>
                    <span class="d-none d-md-block font-weight-medium">None</span>
                </a>
            </li>
            @foreach (string instrument in _instruments.OrderBy(f => f))
            {
                <li class="nav-item">
                    <a @onclick="async () => await ClickInstrumentFilterAsync(instrument)" class="nav-link note-link d-flex align-items-center justify-content-center px-3 px-md-3 me-0 me-md-2 text-body-color btn  @(_filterInstrument != null && _filterInstrument == instrument ? "active" : "")">
                        <iconify-icon icon="tabler:list" class="fill-white me-0 me-md-1"></iconify-icon>
                        <span class="d-none d-md-block font-weight-medium">@instrument</span>
                    </a>
                </li>
            }
        </ul>
    </div>
    
    <div class="row card w-100 position-relative overflow-hidden">
        <div class="px-4 py-3 border-bottom">
            <h5 class="card-title fw-semibold mb-0 lh-sm">Signals</h5>
        </div>
        <div class="card-body p-4">
            <div class="table-responsive rounded-2 mb-4">
                <table class="table border text-nowrap customize-table mb-0 align-middle">
                    <thead class="text-dark fs-4">
                        <tr>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">Strategy</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">Signal</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">Date Created</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">Last Updated</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">TV Status</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">Strategy</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">Orders</h6>
                            </th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var signal in _signals)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center gap-2">
                                        @if (signal.StrategyType == StrategyType.Strategy1)
                                        {
                                            <span class="badge text-bg-primary rounded-3 fw-semibold fs-2">Strategy 1</span>
                                        }
                                        else if (signal.StrategyType == StrategyType.Strategy2)
                                        {
                                            <span class="badge text-bg-success rounded-3 fw-semibold fs-2">Strategy 2</span>
                                        }
                                        else if (signal.StrategyType == StrategyType.Strategy3)
                                        {
                                            <span class="badge text-bg-secondary rounded-3 fw-semibold fs-2">Strategy 3</span>
                                        }
                                        else if (signal.StrategyType == StrategyType.Strategy4)
                                        {
                                            <span class="badge text-bg-danger rounded-3 fw-semibold fs-2">Strategy 4</span>
                                        }
                                        else if (signal.StrategyType == StrategyType.Strategy5)
                                        {
                                            <span class="badge text-bg-indigo rounded-3 fw-semibold fs-2">Strategy 5</span>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <h6 class="fs-4 fw-semibold mb-0">@signal.Instrument</h6>
                                    <p class="mb-0 fw-normal">@signal.OrderType</p>
                                </td>
                                <td>
                                    <p class="mb-0 fw-normal">@signal.DateCreated.ToString("dd/MM/yy HH:mm:ss")</p>
                                </td>
                                <td>
                                    <p class="mb-0 fw-normal">@signal.DateLastUpdated.ToString("dd/MM/yy HH:mm:ss")</p>
                                </td>
                                <td>
                                    @if (signal.TradingviewStateType == TradingviewStateType.Init)
                                    {
                                        <span class="mb-1 badge rounded-pill  bg-primary-subtle text-primary">Init</span>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.Entry)
                                    {
                                        <span class="mb-1 badge rounded-pill  bg-secondary-subtle text-secondary">Entry</span>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.BeHit)
                                    {
                                        <span class="mb-1 badge rounded-pill  bg-warning-subtle text-warning">BE</span>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.SlHit)
                                    {
                                        <span class="mb-1 badge rounded-pill  bg-danger-subtle text-danger">SL</span>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.TpHit)
                                    {
                                        <span class="mb-1 badge rounded-pill  bg-success-subtle text-success">TP</span>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.Cancel)
                                    {
                                        <span class="mb-1 badge rounded-pill  bg-info-subtle text-info">Cancelled</span>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.CloseAll)
                                    {
                                        <span class="mb-1 badge rounded-pill  bg-info-subtle text-info">Close</span>
                                    }
                                    
                                </td>
                                <td>
                                    @if (signal.TradingviewStateType == TradingviewStateType.Init)
                                    {
                                        <span class="badge bg-success-subtle text-success fw-semibold fs-2 gap-1 d-inline-flex align-items-center">
                                            <i class="ti ti-circle fs-3"></i>active
                                        </span>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.Entry)
                                    {
                                        <span class="badge bg-success-subtle text-success fw-semibold fs-2 gap-1 d-inline-flex align-items-center">
                                            <i class="ti ti-circle fs-3"></i>active
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge text-bg-light text-dark fw-semibold fs-2 gap-1 d-inline-flex align-items-center">
                                            <i class="ti ti-clock-hour-4 fs-3"></i>done
                                        </span>
                                    }
                                </td>
                                <td>@signal.Orders.Count()</td>
                                <td>
                                    <div class="dropdown dropstart">
                                        <a href="#" class="text-muted" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                            <i class="ti ti-dots-vertical fs-6"></i>
                                        </a>
                                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                            <li>
                                                <a class="dropdown-item d-flex align-items-center gap-3" href="/Signals/@signal.ID/Orders">
                                                    MT Orders
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item d-flex align-items-center gap-3" @onclick="() => LogSignalClick(signal.ID)">
                                                   Raw Log
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item d-flex align-items-center gap-3" @onclick="() => EditASignalClick(signal.ID)">
                                                    Edit
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item d-flex align-items-center gap-3" @onclick="() => DeleteASignalClick(signal.ID)">
                                                    Delete
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item d-flex align-items-center gap-3" @onclick="() => RetryASignalClick(signal.ID)">
                                                    Retry
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <SignalAddOrEditModal @ref="@_signalAddOrEditModal"></SignalAddOrEditModal>

    <SignalDeleteModal @ref="@_signalDeleteModal"></SignalDeleteModal>

    <SignalRetryModal @ref="@_signalRetryModal"></SignalRetryModal>

    <SignalLogModal @ref="@_signalLogModal"></SignalLogModal>
</div>


@code {
    private List<Entity.Signal> _signals { get; set; } = new();
    private List<string> _instruments { get; set; } = new();

    private StrategyType _filterStrategyType { get; set; } = StrategyType.None;
    private string? _filterInstrument { get; set; } = null;

    private SignalAddOrEditModal? _signalAddOrEditModal { get; set; } = null;
    private SignalDeleteModal? _signalDeleteModal { get; set; } = null;
    private SignalRetryModal? _signalRetryModal { get; set; } = null;
    private SignalLogModal? _signalLogModal { get; set; } = null;



    protected override async Task OnInitializedAsync()
    {
        _signals = await _signalRepository.GetAllLast200(692803787);
        _instruments = (await _signalRepository.GetAllLast200(692803787)).Select(f => f.Instrument).Distinct().ToList();
    }

    private async Task ClickStrategyTypeFilterAsync(StrategyType strategyType)
    {
        _filterStrategyType = strategyType;
        _filterInstrument = null;
        _instruments = (await _signalRepository.GetAllLast200ByStrategyType(692803787, _filterStrategyType)).Select(f => f.Instrument).Distinct().ToList();
        await FilterAsync();
    }

    private async Task ClickInstrumentFilterAsync(string? instrument)
    {
        _filterInstrument = instrument;
        await FilterAsync();
    }

    private async Task FilterAsync()
    {
        if (_filterStrategyType == StrategyType.None)
        {
            if (_filterInstrument == null)
            {
                _signals = await _signalRepository.GetAllLast200(692803787);
            }
            else
            {
                _signals = await _signalRepository.GetAllLast200ByInstrument(692803787, _filterInstrument);
            }
        }
        else
        {
            if (_filterInstrument == null)
            {
                _signals = await _signalRepository.GetAllLast200ByStrategyType(692803787, _filterStrategyType); 
            }
            else
            {
                _signals = await _signalRepository.GetAllLast200ByStrategyType(692803787, _filterStrategyType, _filterInstrument);
            }
        }
    }

    private async Task AddASignalClick()
    {
        if (_signalAddOrEditModal != null)
        {
            await _signalAddOrEditModal.InitAsync(692803787);
        }
    }

    private async Task LogSignalClick(long id)
    {
        if (_signalLogModal != null)
        {
            await _signalLogModal.InitAsync(692803787, id);
        }
    }

    private async Task EditASignalClick(long id)
    {
        if (_signalAddOrEditModal != null)
        {
            await _signalAddOrEditModal.InitAsync(692803787, id);
        }
    }

    private async Task DeleteASignalClick(long id)
    {
        if (_signalDeleteModal != null)
        {
            await _signalDeleteModal.InitAsync(692803787, id);
        }
    }

    private async Task RetryASignalClick(long id)
    {
        if (_signalRetryModal != null)
        {
            await _signalRetryModal.InitAsync(692803787, id);
        }
    }
}
