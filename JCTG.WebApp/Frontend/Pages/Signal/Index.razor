@page "/Signals";
@inject SignalRepository _signalRepository;
@inject ClientRepository _clientRepository;
@using JCTG.WebApp.Frontend.Components.Modal;
@using JCTG.WebApp.Frontend.Components.Widget;
@using JCTG.Command;
@using JCTG.Models;

<div class="container-fluid mw-100">

    <div class="font-weight-medium shadow-none position-relative overflow-hidden mb-4">
        <div class="card-body px-0">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="font-weight-medium ">Signals</h4>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item">
                                <a class="text-primary text-decoration-none" href="/">
                                    Home
                                </a>
                            </li>
                            <li class="breadcrumb-item d-flex justify-content-center align-items-center ps-0">
                                <iconify-icon icon="tabler:chevron-right"></iconify-icon>
                            </li>
                            <li class="breadcrumb-item" aria-current="page">
                                <a class="text-primary text-decoration-none" href="/">
                                    Signals
                                </a>
                            </li>
                        </ol>
                    </nav>
                </div>
                <div>
                    <LastMonthWidget></LastMonthWidget>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <h4 class="mb-3 mt-4 fs-5">Profit and costs</h4>
        <div class="col-lg-3 col-md-6">
            <div class="card border-top border-info">
                <div class="card-body">
                    <div class="d-flex no-block align-items-center">
                        <div>
                            <h2 class="fs-7">$@_totalPnl</h2>
                            <h6 class="fw-medium text-info mb-0">Total PNL</h6>
                        </div>
                        <div class="ms-auto">
                            <span class="text-info display-6"><i class="ti ti-chart-bar"></i></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="card border-top border-primary">
                <div class="card-body">
                    <div class="d-flex no-block align-items-center">
                        <div>
                            <h2 class="fs-7">$@_totalCommission</h2>
                            <h6 class="fw-medium text-primary mb-0">Total Commission</h6>
                        </div>
                        <div class="ms-auto">
                            <span class="text-primary display-6"><i class="ti ti-rss"></i></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="card border-top border-dark">
                <div class="card-body">
                    <div class="d-flex no-block align-items-center">
                        <div>
                            <h2 class="fs-7">$@_totalSwapCosts</h2>
                            <h6 class="fw-medium text-dark mb-0">Total Swap Costs</h6>
                        </div>
                        <div class="ms-auto">
                            <span class="text-dark display-6"><i class="ti ti-archive"></i></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="card border-top border-success">
                <div class="card-body">
                    <div class="d-flex no-block align-items-center">
                        <div>
                            <h2 class="fs-7">$@_totalSpreadCosts</h2>
                            <h6 class="fw-medium text-success mb-0">Total spread costs</h6>
                        </div>
                        <div class="ms-auto">
                            <span class="text-success display-6"><i class="ti ti-map"></i></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <div class="row card w-100 position-relative overflow-hidden">
        <div class="px-4 py-3 border-bottom">
            <div class="d-flex align-items-center">
                <div>
                    <h5 class="card-title fw-semibold mb-0 lh-sm">Signals</h5>
                </div>
                <div class="ms-auto d-flex align-items-center">
                    <ul class="list-inline fs-2 dl me-2">
                        <li class="list-inline-item">
                            <select class="form-select" @onchange="SubmitStrategyTypeFilterAsync">
                                @foreach (StrategyType strategy in Enum.GetValues(typeof(StrategyType)))
                                {
                                    <option value="@strategy">@strategy</option>
                                }
                            </select>
                        </li>
                        <li class="list-inline-item">
                            <select class="form-select" @onchange="SubmitFilterInstrumentAsync">
                                <option value="">None</option>
                                @foreach (string instrument in _instruments.OrderBy(f => f))
                                {
                                    <option value="@instrument">@instrument</option>
                                }
                            </select>
                        </li>
                        <li class="list-inline-item">
                            <select class="form-select" @onchange="SubmitFilterDateAsync">
                                <option value="0">Last Month</option>
                                <option value="1">Last Week</option>
                                <option value="2">Last 3 Days</option>
                                <option value="3" selected="selected">Last 1 Day</option>
                            </select>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="table-responsive rounded-2 mb-4">
                <table class="table border text-nowrap customize-table mb-0 align-middle">
                    <thead class="text-dark fs-4">
                        <tr>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">Strategy</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">TV Magic</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">MT Magic</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">Signal</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">Date Created</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">Last Updated</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">TV Status</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">TV Exit RR</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">PNL</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">Strategy</h6>
                            </th>
                            <th>
                                <h6 class="fs-4 fw-semibold mb-0">Orders</h6>
                            </th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var signal in _signals)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center gap-2">
                                        @if (signal.StrategyType == StrategyType.Strategy1)
                                        {
                                            <span class="badge text-bg-primary rounded-3 fw-semibold fs-2">Strategy 1</span>
                                        }
                                        else if (signal.StrategyType == StrategyType.Strategy2)
                                        {
                                            <span class="badge text-bg-success rounded-3 fw-semibold fs-2">Strategy 2</span>
                                        }
                                        else if (signal.StrategyType == StrategyType.Strategy3)
                                        {
                                            <span class="badge text-bg-secondary rounded-3 fw-semibold fs-2">Strategy 3</span>
                                        }
                                        else if (signal.StrategyType == StrategyType.Strategy4)
                                        {
                                            <span class="badge text-bg-danger rounded-3 fw-semibold fs-2">Strategy 4</span>
                                        }
                                        else if (signal.StrategyType == StrategyType.Strategy5)
                                        {
                                            <span class="badge text-bg-indigo rounded-3 fw-semibold fs-2">Strategy 5</span>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <p class="mb-0 fw-normal">@signal.Magic</p>
                                </td>
                                <td>
                                    <p class="mb-0 fw-normal">@signal.ID</p>
                                </td>
                                <td>
                                    <h6 class="fs-4 fw-semibold mb-0">@signal.Instrument</h6>
                                    <p class="mb-0 fw-normal">@signal.OrderType</p>
                                </td>
                                <td>
                                    <p class="mb-0 fw-normal">@signal.DateCreated.ToString("dd/MM/yy HH:mm:ss")</p>
                                </td>
                                <td>
                                    <p class="mb-0 fw-normal">@signal.DateLastUpdated.ToString("dd/MM/yy HH:mm:ss")</p>
                                </td>
                                <td>
                                    @if (signal.TradingviewStateType == TradingviewStateType.Init)
                                    {
                                        <span class="mb-1 badge rounded-pill  bg-primary-subtle text-primary">Init</span>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.Entry)
                                    {
                                        <span class="mb-1 badge rounded-pill  bg-secondary-subtle text-secondary">Entry</span>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.BeHit)
                                    {
                                        <span class="mb-1 badge rounded-pill  bg-warning-subtle text-warning">BE</span>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.SlHit)
                                    {
                                        <span class="mb-1 badge rounded-pill  bg-danger-subtle text-danger">SL</span>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.TpHit)
                                    {
                                        <span class="mb-1 badge rounded-pill  bg-success-subtle text-success">TP</span>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.CancelOrder)
                                    {
                                        <span class="mb-1 badge rounded-pill  bg-info-subtle text-info">Cancelled</span>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.CloseAll)
                                    {
                                        <span class="mb-1 badge rounded-pill  bg-info-subtle text-info">Close</span>
                                    }
                                </td>
                                <td>
                                    @signal.ExitRiskRewardRatio

                                    @if (signal.TradingviewStateType == TradingviewStateType.CancelOrder)
                                    {
                                       <text>-</text>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.Init)
                                    {
                                        <text>?</text>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.Entry)
                                    {
                                        <text>?</text>
                                    }
                                </td>
                                <td>@Math.Round(signal.Orders.Sum(f => f.Pnl), 2)</td>
                                <td>
                                    @if (signal.TradingviewStateType == TradingviewStateType.Init)
                                    {
                                        <span class="badge bg-success-subtle text-success fw-semibold fs-2 gap-1 d-inline-flex align-items-center">
                                            <i class="ti ti-circle fs-3"></i>active
                                        </span>
                                    }
                                    else if (signal.TradingviewStateType == TradingviewStateType.Entry)
                                    {
                                        <span class="badge bg-success-subtle text-success fw-semibold fs-2 gap-1 d-inline-flex align-items-center">
                                            <i class="ti ti-circle fs-3"></i>active
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge text-bg-light text-dark fw-semibold fs-2 gap-1 d-inline-flex align-items-center">
                                            <i class="ti ti-clock-hour-4 fs-3"></i>done
                                        </span>
                                    }
                                </td>
                                <td>
                                    @{
                                        var orderCount = signal.Orders.Count();
                                        var clientCount = _clients.Where(f => f.IsEnable).SelectMany(f => f.Pairs).Count(f => f.TickerInTradingView == signal.Instrument && f.StrategyType == signal.StrategyType);

                                        <span>@orderCount / @clientCount</span>

                                    }
                                </td>
                                <td>
                                    @{
                                        if (orderCount < clientCount)
                                        {
                                            <iconify-icon icon="pajamas:warning-solid"></iconify-icon>
                                        }
                                    }
                                </td>
                                <td>
                                    <div class="dropdown dropstart">
                                        <a href="#" class="text-muted" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                            <i class="ti ti-dots-vertical fs-6"></i>
                                        </a>
                                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                            <li>
                                                <a class="dropdown-item d-flex align-items-center gap-3" href="/Signals/@signal.ID/Orders">
                                                    MT Orders
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item d-flex align-items-center gap-3" @onclick="() => LogSignalClick(signal.ID)">
                                                    Raw Log
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item d-flex align-items-center gap-3" @onclick="() => EditASignalClick(signal.ID)">
                                                    Edit
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item d-flex align-items-center gap-3" @onclick="() => DeleteASignalClick(signal.ID)">
                                                    Delete
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item d-flex align-items-center gap-3" @onclick="() => RetryASignalClick(signal.ID)">
                                                    Retry
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <SignalAddOrEditModal @ref="@_signalAddOrEditModal" OnClose="async () => await ReloadAsync()"></SignalAddOrEditModal>

    <SignalDeleteModal @ref="@_signalDeleteModal" OnClose="async () => await ReloadAsync()"></SignalDeleteModal>

    <SignalRetryModal @ref="@_signalRetryModal" OnClose="async () => await ReloadAsync()"></SignalRetryModal>

    <SignalLogModal @ref="@_signalLogModal"></SignalLogModal>
</div>


@code {
    private List<Entity.Signal> _signals { get; set; } = new();
    private List<string> _instruments { get; set; } = new();
    private List<Entity.Client> _clients { get; set; } = new();

    private StrategyType _filterStrategyType { get; set; } = StrategyType.None;
    private string? _filterInstrument { get; set; } = null;
    private DateTime _filterDate { get; set; } = DateTime.UtcNow.Date.AddDays(-1);

    private SignalAddOrEditModal? _signalAddOrEditModal { get; set; } = null;
    private SignalDeleteModal? _signalDeleteModal { get; set; } = null;
    private SignalRetryModal? _signalRetryModal { get; set; } = null;



    private SignalLogModal? _signalLogModal { get; set; } = null;

    private double _totalPnl = 0.0;
    private double _totalCommission = 0.0;
    private double _totalSwapCosts = 0.0;
    private double _totalSpreadCosts = 0.0;



    protected override async Task OnInitializedAsync()
    {
        _clients = await _clientRepository.GetAllAsync(692803787);
        await ReloadAsync();
    }

    private async Task SubmitStrategyTypeFilterAsync(ChangeEventArgs? e)
    {
        // Get data from database
        var filter = e == null || e.Value == null ? StrategyType.None : Enum.Parse<StrategyType>(e.Value.ToString());

        _filterStrategyType = filter;
        _filterInstrument = null;
        _instruments = (await _signalRepository.GetAllByStrategyType(692803787, _filterStrategyType, _filterDate)).Select(f => f.Instrument).Distinct().ToList();
        await ReloadAsync();
    }

    private async Task SubmitFilterInstrumentAsync(ChangeEventArgs? e)
    {
        // Get data from database
        var filter = e == null || e.Value == null || e.Value == string.Empty ? null : e.Value.ToString();

        _filterInstrument = filter;
        await ReloadAsync();
    }

    private async Task SubmitFilterDateAsync(ChangeEventArgs? e)
    {
        // Get data from database
        var filter = e == null || e.Value == null ? 3 : int.Parse(e.Value.ToString());

        // Init filter
        if (filter == 0)
        {
            _filterDate = DateTime.UtcNow.Date.AddMonths(-1);
        }
        else if (filter == 1)
        {
            _filterDate = DateTime.UtcNow.Date.AddDays(-8);
        }
        else if (filter == 2)
        {
            _filterDate = DateTime.UtcNow.Date.AddDays(-3);
        }
        else if (filter == 3)
        {
            _filterDate = DateTime.UtcNow.Date.AddDays(-1);
        }

        // Reload chart
        await ReloadAsync();
    }

    private async Task ReloadAsync()
    {
        if (_filterStrategyType == StrategyType.None)
        {
            if (_filterInstrument == null)
            {
                _signals = await _signalRepository.GetAll(692803787, _filterDate);
            }
            else
            {
                _signals = await _signalRepository.GetAllByInstrument(692803787, _filterInstrument, _filterDate);
            }
        }
        else
        {
            if (_filterInstrument == null)
            {
                _signals = await _signalRepository.GetAllByStrategyType(692803787, _filterStrategyType, _filterDate);
            }
            else
            {
                _signals = await _signalRepository.GetAllByStrategyType(692803787, _filterStrategyType, _filterInstrument, _filterDate);
            }
        }
        _instruments = _signals.Select(f => f.Instrument).Distinct().ToList();
        _totalPnl =  Math.Round(_signals.SelectMany(f => f.Orders).Sum(f => f.Pnl), 2);
        _totalCommission = Math.Abs(Math.Round(_signals.SelectMany(f => f.Orders).Sum(f => f.Commission), 2));
        _totalSwapCosts = Math.Abs(Math.Round(_signals.SelectMany(f => f.Orders).Sum(f => f.Swap), 2));
        _totalSpreadCosts = Math.Abs(Math.Round(_signals.SelectMany(f => f.Orders).Sum(f => f.SpreadCost), 2));

    }

    private async Task AddASignalClick()
    {
        if (_signalAddOrEditModal != null)
        {
            await _signalAddOrEditModal.InitAsync(692803787);
        }
    }

    private async Task LogSignalClick(long id)
    {
        if (_signalLogModal != null)
        {
            await _signalLogModal.InitAsync(692803787, id);
        }
    }

    private async Task EditASignalClick(long id)
    {
        if (_signalAddOrEditModal != null)
        {
            await _signalAddOrEditModal.InitAsync(692803787, id);
        }
    }

    private async Task DeleteASignalClick(long id)
    {
        if (_signalDeleteModal != null)
        {
            await _signalDeleteModal.InitAsync(692803787, id);
        }
    }

    private async Task RetryASignalClick(long id)
    {
        if (_signalRetryModal != null)
        {
            await _signalRetryModal.InitAsync(692803787, id);
        }
    }
}
