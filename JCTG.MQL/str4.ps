//@version=5
strategy("STR4.1", overlay=true, process_orders_on_close = true, calc_on_every_tick = true, default_qty_type = strategy.percent_of_equity, default_qty_value = 100, pyramiding = 100, currency = currency.NONE, initial_capital = 10000000, close_entries_rule="ANY")
import TradingView/ta/5



//INPUTS
i_showStrategy              = input.bool(true,title="Show Strategy",group = "General") 
i_showRiskReward            = input.bool(true,title="Show Risk/Reward Area",group = "General") 
i_takeLongOrShort           = input.string("Long", title="Direction",group = "General", options = ["Long", "Short"])

i_isCloseTime               = input.string("End of session", title="Close trades",group = "Timing", options = ["End of session", "Friday end of session", "None"])
i_timeClosePM               = input.int(1455, title="PM Close Time",group = "Timing")

i_pyramiding                = input.bool(false,title = "Pyramiding?", group = "Risk / Reward")
i_positionSize              = input.string("Fixed 1%", title = "Position Size", options = ["Fixed 1%", "Compound 1%", "1 Unit", "Auto"], group = "Risk / Reward")
i_rewardRatio               = input.float(3.0, title = "Reward Ratio", group = "Risk / Reward") 
i_moveSLtoBEafterR          = input.float(1.0,title="Move SL to BE after xR",group = "Risk / Reward") 
i_cancellimit               = input.int(10, title = "Cancel limit order after (x) bars", group = "Risk / Reward") 

i_pcLicenseID               = input.string("692803787",title="License ID",group = "Account")


//VARS
var int id = 0
var float longTP = na, var float longSL = na, var float longEntryPrice = na
var float shortTP = na, var float shortSL = na, var float shortEntryPrice = na
var float risk = na
var int orderBar = na

//FUNCTIONS
bullishOutsideBar() => 
    close > high[1] and low < low[1]

bearishOutsideBar() => 
    close < low[1] and high > high[1]


isSignalCandle() => 
    if  i_pyramiding or strategy.position_size == 0
        i_takeLongOrShort == "Long" ? bearishOutsideBar() : bullishOutsideBar()
    else
        false

idTrade() =>
	str.tostring(id)

roundUp(number, decimals) =>
    factor = math.pow(10, decimals)
    math.ceil(number * factor) / factor

positionSize(entryPrice, diff) =>
    float posSize = na
    if i_positionSize == "Fixed 1%"
        posSize := math.abs(roundUp(strategy.initial_capital *  0.01 / diff / syminfo.pointvalue, 2))
    else if i_positionSize == "Compound 1%"
        posSize := roundUp(strategy.equity *  0.01 / diff / syminfo.pointvalue, 2)
    else if i_positionSize == "1 Unit"
        posSize := 1

isCloseTime() =>
    closeHour = i_timeClosePM / 100
    closeMinute = i_timeClosePM % 100
    currentTime = timestamp(year(time), month(time), dayofmonth(time), closeHour, closeMinute, second(0))
    if i_isCloseTime == "End of session" and time[1] < currentTime and time >= currentTime
        true
    else if i_isCloseTime == "Friday end of session" and dayofweek(time) == dayofweek.friday and time[1] < currentTime and time >= currentTime
        true
    else
        false



//long
if isSignalCandle() and i_takeLongOrShort == "Long" and barstate.isconfirmed
    if not i_pyramiding and not na(orderBar)
        strategy.cancel(idTrade())
    id := time("") / 100000
    longEntryPrice := high
    longSL := longEntryPrice - (high - low)
    risk := longEntryPrice - longSL
    longTP := longEntryPrice + (i_rewardRatio * risk)
    if i_cancellimit > 0
        orderBar := bar_index

    // Position Size
    positionSize = positionSize(longEntryPrice, risk)
    
    // Do entry
    message = i_pcLicenseID + ',buy,' + syminfo.ticker + ',entryprice=' + str.tostring(longEntryPrice) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(longSL) + ',tp=' + str.tostring(longTP) + ',magic=' + idTrade() + ',strategytype=4'
    strategy.entry(id = idTrade(), direction = strategy.long, comment = idTrade(), stop = longEntryPrice, qty = positionSize, alert_message = message)
    messageTP = i_pcLicenseID + ',close,' + syminfo.ticker + ',entryprice=' + str.tostring(longEntryPrice) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(longSL) + ',tp=' + str.tostring(longTP) + ',magic=' + idTrade() + ',strategytype=4'
    messageSL = i_pcLicenseID + ',close,' + syminfo.ticker + ',entryprice=' + str.tostring(longEntryPrice) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(longSL) + ',tp=' + str.tostring(longTP) + ',magic=' + idTrade() + ',strategytype=4'
    strategy.exit("EXIT" + idTrade(), from_entry =  idTrade(), comment= idTrade(), comment_loss=str.tostring("-1"), comment_profit = str.tostring(i_rewardRatio), stop=longSL, limit=longTP, alert_profit = messageTP, alert_loss = messageSL)

if i_takeLongOrShort == "Long" and strategy.position_size > 0 and isCloseTime() and barstate.isconfirmed
    rr = roundUp((close - longEntryPrice) / risk, 2)
    if rr > i_rewardRatio
        rr := 0
    else if rr < -1
        rr := -1
    message = i_pcLicenseID + ',close,' + syminfo.ticker + ',entryprice=' + str.tostring(close) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(close) + ',tp=' + str.tostring(close) + ',magic=' + idTrade() + ',strategytype=4'
    strategy.close_all(comment = str.tostring(rr), alert_message = message)
    if i_cancellimit > 0
        strategy.cancel(idTrade()) 

if i_takeLongOrShort == "Long" and strategy.position_size > 0 and longEntryPrice != longSL and i_moveSLtoBEafterR > 0 and close >= (longEntryPrice + (i_moveSLtoBEafterR * risk)) and barstate.isconfirmed
    longSL := longEntryPrice    
    message = i_pcLicenseID + ',modifysltobe,' + syminfo.ticker + ',entrypriceice=' + str.tostring(longEntryPrice) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(longSL) + ',tp=' + str.tostring(longTP) + ',magic=' + idTrade() + ',strategytype=4'
    messageTP = i_pcLicenseID + ',close,' + syminfo.ticker + ',entryprice=' + str.tostring(longEntryPrice) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(longSL) + ',tp=' + str.tostring(longTP) + ',magic=' + idTrade() + ',strategytype=4'
    messageSL = i_pcLicenseID + ',close,' + syminfo.ticker + ',entryprice=' + str.tostring(longEntryPrice) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(longSL) + ',tp=' + str.tostring(longTP) + ',magic=' + idTrade() + ',strategytype=4'
    strategy.exit("EXIT" + idTrade(), from_entry = idTrade(), comment = idTrade(), comment_loss= str.tostring("0"), comment_profit = str.tostring(i_rewardRatio), stop = longSL, limit=longTP, alert_profit = messageTP, alert_loss = messageSL) 
    alert(message)
    
if isSignalCandle() and i_takeLongOrShort == "Short" and barstate.isconfirmed
    if not i_pyramiding and not na(orderBar)
        strategy.cancel(idTrade())
    id := time("") / 100000
    shortEntryPrice := low
    shortSL := shortEntryPrice + (high - low)
    risk := shortSL - shortEntryPrice
    shortTP := shortEntryPrice - (i_rewardRatio * risk)
    if i_cancellimit > 0
        orderBar := bar_index

    // Position Size
    positionSize = positionSize(shortEntryPrice, risk)
    
    // Do entry
    message = i_pcLicenseID + ',sell,' + syminfo.ticker + ',entryprice=' + str.tostring(shortEntryPrice) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(shortSL) + ',tp=' + str.tostring(shortTP) + ',magic=' + idTrade() + ',strategytype=4'
    strategy.entry(id = idTrade(), direction = strategy.short, comment = idTrade(), stop = shortEntryPrice, qty = positionSize, alert_message = message)
    messageTP = i_pcLicenseID + ',close,' + syminfo.ticker + ',entryprice=' + str.tostring(shortEntryPrice) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(shortSL) + ',tp=' + str.tostring(shortTP) + ',magic=' + idTrade() + ',strategytype=4'
    messageSL = i_pcLicenseID + ',close,' + syminfo.ticker + ',entryprice=' + str.tostring(shortEntryPrice) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(shortSL) + ',tp=' + str.tostring(shortTP) + ',magic=' + idTrade() + ',strategytype=4'
    strategy.exit("EXIT" + idTrade(), from_entry =  idTrade(), comment= idTrade(), comment_loss=str.tostring("-1"), comment_profit = str.tostring(i_rewardRatio), stop=shortSL, limit=shortTP, alert_profit = messageTP, alert_loss = messageSL)

if i_takeLongOrShort == "Short" and strategy.position_size < 0 and isCloseTime() and barstate.isconfirmed
    rr = roundUp((shortEntryPrice - close) / risk, 2)
    if rr > i_rewardRatio
        rr := 0
    else if rr < -1
        rr := -1
    message = i_pcLicenseID + ',close,' + syminfo.ticker + ',entryprice=' + str.tostring(close) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(close) + ',tp=' + str.tostring(close) + ',magic=' + idTrade() + ',strategytype=4'
    strategy.close_all(comment = str.tostring(rr), alert_message = message)
    if i_cancellimit > 0
        strategy.cancel(idTrade()) 

if i_takeLongOrShort == "Short" and strategy.position_size < 0 and shortEntryPrice != shortSL and i_moveSLtoBEafterR > 0 and close <= (shortEntryPrice - (i_moveSLtoBEafterR * risk)) and barstate.isconfirmed
    shortSL := shortEntryPrice
    message = i_pcLicenseID + ',modifysltobe,' + syminfo.ticker + ',entrypriceice=' + str.tostring(shortEntryPrice) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(shortSL) + ',tp=' + str.tostring(shortTP) + ',magic=' + idTrade() + ',strategytype=4'
    messageTP = i_pcLicenseID + ',close,' + syminfo.ticker + ',entrypriceice=' + str.tostring(shortEntryPrice) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(shortSL) + ',tp=' + str.tostring(shortTP) + ',magic=' + idTrade() + ',strategytype=4'
    messageSL = i_pcLicenseID + ',close,' + syminfo.ticker + ',entrypriceice=' + str.tostring(shortEntryPrice) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(shortSL) + ',tp=' + str.tostring(shortTP) + ',magic=' + idTrade() + ',strategytype=4'
    strategy.exit("EXIT" + idTrade(), from_entry = idTrade(), comment = idTrade(), comment_loss= str.tostring("0"), comment_profit = str.tostring(i_rewardRatio), stop = shortSL, limit=shortTP, alert_profit = messageTP, alert_loss = messageSL) 
    alert(message)

//CANCEL PENDING ORDER
if i_cancellimit > 0 and not na(orderBar) and bar_index - orderBar >= i_cancellimit and barstate.isconfirmed
    strategy.cancel(idTrade())

if strategy.position_size != 0 and not na(orderBar) or bar_index - orderBar >= i_cancellimit and barstate.isconfirmed
    orderBar := na

if strategy.position_size == 0  and not na(orderBar) and low < shortTP and barstate.isconfirmed
    strategy.cancel(idTrade()) 

if strategy.position_size == 0 and not na(orderBar) and high > longTP and barstate.isconfirmed
    strategy.cancel(idTrade())

if strategy.position_size == 0 and not na(orderBar) and isCloseTime() and barstate.isconfirmed
    strategy.cancel(idTrade())

//PLOTS
barcolor(isSignalCandle() ? color.blue  : na, title = "Signal Candle")
plotshape(isSignalCandle(), style=shape.xcross, color = color.black, title = "Signal Candle")
bgcolor(isCloseTime() ? color.new(color.red, 70) : na)

L1 = plot(i_showRiskReward and strategy.position_size > 0 ? longEntryPrice : na, color=color.black, linewidth=1, style=plot.style_linebr, title="Long Entry Price")
L2 = plot(i_showRiskReward and strategy.position_size > 0 ? longSL : na , color=color.red, linewidth=1, style=plot.style_linebr, title="Long Stop-Loss Price")
L3 = plot(i_showRiskReward and strategy.position_size > 0 ? longTP : na, color=color.green, linewidth=1, style=plot.style_linebr, title="Long Take-Profit Price")
fill(L1,L2,color=color.new(color.red,90))
fill(L1,L3,color=color.new(color.green,90)) 

S1 = plot(i_showRiskReward and strategy.position_size < 0 ? shortEntryPrice : na, color=color.black, linewidth=1, style=plot.style_linebr, title="Short Entry Price")
S2 = plot(i_showRiskReward and strategy.position_size < 0 ? shortSL : na , color=color.red, linewidth=1, style=plot.style_linebr, title="Short Stop-Loss Price")
S3 = plot(i_showRiskReward and strategy.position_size < 0 ? shortTP : na, color=color.green, linewidth=1, style=plot.style_linebr, title="Short Take-Profit Price")
fill(S1,S2,color=color.new(color.red,90))
fill(S1,S3,color=color.new(color.green,90)) 

var table nameDisplay = table.new(position.middle_center, 1, 1, bgcolor = color.white, frame_width = 0)
if barstate.islast and math.round(strategy.equity,0) <= 0
    table.cell(nameDisplay, 0, 0, "Total Equity dropped below ZERO.\nThese parameters are not useful.",text_color=color.white, bgcolor=color.red)

