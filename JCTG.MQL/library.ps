// String Concatenation Library
//@version=5
library("Tradehubler")



// Helper functions
export roundUp(float number, int decimals) =>
    factor = math.pow(10, decimals)
    math.ceil(number * factor) / factor

export positionSize(float entryPrice, float stopLossPrice, float riskPercent) =>
	// Calculate the amount to risk per trade
	amountToRisk = strategy.initial_capital * (riskPercent / 100)

	// Calculate the stop loss amount per share
	stopLossAmount = math.abs(entryPrice - stopLossPrice)

	// Calculate the position size
	positionSize = amountToRisk / stopLossAmount

	// Round
	math.abs(roundUp(positionSize, 2))

export magic() =>
	(time("1") / 100) + math.round(close * 100)

export magicAsString(int magic) =>
	str.tostring(magic)

export magicAsString() =>
	str.tostring(magic())


export isEndOfSession(int timeClose) =>
    closeHour = timeClose / 100
    closeMinute = timeClose % 100
    currentTime = timestamp(year(time), month(time), dayofmonth(time), closeHour, closeMinute, second(0))
    if time[1] < currentTime and time >= currentTime
        true
    else
        false

export isFridayEndOfSession(int timeClose) =>
    closeHour = timeClose / 100
    closeMinute = timeClose % 100
    currentTime = timestamp(year(time), month(time), dayofmonth(time), closeHour, closeMinute, second(0))
    if dayofweek(time) == dayofweek.friday and time[1] < currentTime and time >= currentTime
        true
    else
        false

export calculateTakeProfitForLong(float entryPrice, float stopLossPrice, float riskToReward) =>
    entryPrice + (riskToReward * math.abs(entryPrice - stopLossPrice))

export calculateTakeProfitForShort(float entryPrice, float stopLossPrice, float riskToReward) =>
    entryPrice - (riskToReward * math.abs(stopLossPrice - entryPrice))

export calculateStopLossForLong(float entryPrice, float risk) =>
    entryPrice - risk

export calculateStopLossForShort(float entryPrice, float risk) =>
     entryPrice + risk

export barExpression(int candleIndex, string dataPoint) =>
    'Bar[' + str.tostring(time[candleIndex]) + '].' + dataPoint


// Function to generate entry alert message
entryLongAlertMessage(string licenseId, string idTrade, int strategyId, string ticker, float risk, float rewardratio, float entryPrice, float stopLossPrice, float takeProfitPrice) =>
    licenseId + ',entrylong,' + ticker + ',magic=' + idTrade + ',strategy=' + str.tostring(strategyId) + ',risk=' + str.tostring(risk) + ',rr=' + str.tostring(rewardratio) + ',entryprice=' + str.tostring(entryPrice) + ',sl=' + str.tostring(stopLossPrice) + ',tp=' + str.tostring(takeProfitPrice)

entryShortAlertMessage(string licenseId, string idTrade, int strategyId, string ticker, float risk, float rewardratio, float entryPrice, float stopLossPrice, float takeProfitPrice) =>
    licenseId + ',entryshort,' + ticker + ',magic=' + idTrade + ',strategy=' + str.tostring(strategyId) + ',risk=' + str.tostring(risk) + ',rr=' + str.tostring(rewardratio) + ',entryprice=' + str.tostring(entryPrice) + ',sl=' + str.tostring(stopLossPrice) + ',tp=' + str.tostring(takeProfitPrice)

tpHitAlertMessage(string licenseId, string idTrade, int strategyId, string ticker, float exitrr) =>
    licenseId + ',tphit,' + ticker + ',magic=' + idTrade + ',strategy=' + str.tostring(strategyId) + ',exitrr=' + str.tostring(exitrr, "#.##")

slHitAlertMessage(string licenseId, string idTrade, int strategyId, string ticker) =>
    licenseId + ',slhit,' + ticker + ',magic=' + idTrade + ',strategy=' + str.tostring(strategyId) + ',exitrr=-1'

beHitAlertMessage(string licenseId, string idTrade, int strategyId, string ticker) =>
    licenseId + ',behit,' + ticker + ',magic=' + idTrade + ',strategy=' + str.tostring(strategyId) + ',exitrr=0'

closeAlertMessage(string licenseId, string idTrade, int strategyId, string ticker, float exitrr) =>
    licenseId + ',close,' + ticker + ',magic=' + idTrade + ',strategy=' + str.tostring(strategyId) + ',exitrr=' + str.tostring(exitrr, "#.##")
	
closeAllAlertMessage(string licenseId, string idTrade, int strategyId, string ticker, float exitrr) =>
    licenseId + ',closeall,' + ticker + ',magic=' + idTrade + ',strategy=' + str.tostring(strategyId) + ',exitrr=' + str.tostring(exitrr, "#.##")
	
cancelAlertMessage(string licenseId, int strategyId, string ticker) =>
    licenseId + ',cancel,' + ticker + ',strategy=' + str.tostring(strategyId)

moveSlToBeAlertMessage(string licenseId, string idTrade, int strategyId, string ticker, string entryExpression) =>
    licenseId + ',movesltobe,' + ticker + ',magic=' + idTrade + ',strategy=' + str.tostring(strategyId) + ',entryexpr=' + entryExpression

moveTpAlertMessage(string licenseId, string idTrade, int strategyId, string ticker, float risk, float rewardratio) =>
    licenseId + ',movetp,' + ticker + ',magic=' + idTrade + ',strategy=' + str.tostring(strategyId) + ',risk=' + str.tostring(risk) + ',rr=' + str.tostring(rewardratio)



buyAlertMessage(string licenseId, string idTrade, int strategyId, string ticker, float risk, float rewardratio, float entryPrice) =>
    stopLossPrice = calculateStopLossForLong(entryPrice, risk)
    takeProfitPrice = calculateTakeProfitForLong(entryPrice, stopLossPrice, rewardratio)
	licenseId + ',buy,' + ticker + ',magic=' + idTrade + ',strategy=' +  str.tostring(strategyId) + ',risk=' + str.tostring(risk) + ',rr=' + str.tostring(rewardratio)+ ',entryprice=' + str.tostring(entryPrice) + ',sl=' + str.tostring(stopLossPrice) + ',tp=' + str.tostring(takeProfitPrice)

buyStopAlertMessage(string licenseId, string idTrade, int strategyId, string ticker, float risk, float rewardratio, float entryPrice, string entryExpresssion, string stopLossExpression) =>
	stopLossPrice = calculateStopLossForLong(entryPrice, risk)
    takeProfitPrice = calculateTakeProfitForLong(entryPrice, stopLossPrice, rewardratio)
    licenseId + ',buystop,' + ticker + ',magic=' + idTrade+ ',strategy=' +  str.tostring(strategyId) + ',risk=' + str.tostring(risk)  + ',rr=' + str.tostring(rewardratio) + ',entryprice=' + str.tostring(entryPrice) + ',entryexpr=' + entryExpresssion + ',sl=' + str.tostring(stopLossPrice) + ',slexpr=' + stopLossExpression + ',tp=' + str.tostring(takeProfitPrice)

sellAlertMessage(string licenseId, string idTrade, int strategyId, string ticker, float risk, float rewardratio, float entryPrice) =>
    stopLossPrice = calculateStopLossForShort(entryPrice, risk)
    takeProfitPrice = calculateTakeProfitForShort(entryPrice, stopLossPrice, rewardratio)
	licenseId + ',sell,' + ticker + ',magic=' + idTrade + ',strategy=' +  str.tostring(strategyId) + ',risk=' + str.tostring(risk) + ',rr=' + str.tostring(rewardratio)+ ',entryprice=' + str.tostring(entryPrice) + ',sl=' + str.tostring(stopLossPrice) + ',tp=' + str.tostring(takeProfitPrice)

sellStopAlertMessage(string licenseId, string idTrade, int strategyId, string ticker, float risk, float rewardratio, float entryPrice, string entryExpresssion, string stopLossExpression) =>
	stopLossPrice = calculateStopLossForShort(entryPrice, risk)
    takeProfitPrice = calculateTakeProfitForShort(entryPrice, stopLossPrice, rewardratio)
    licenseId + ',sellstop,' + ticker + ',magic=' + idTrade+ ',strategy=' +  str.tostring(strategyId) + ',risk=' + str.tostring(risk)  + ',rr=' + str.tostring(rewardratio) + ',entryprice=' + str.tostring(entryPrice) + ',entryexpr=' + entryExpresssion + ',sl=' + str.tostring(stopLossPrice) + ',slexpr=' + stopLossExpression + ',tp=' + str.tostring(takeProfitPrice)





// Execute order
export buy(string licenseId, int magic, string ticker, int strategyId, float rewardratio, float riskPercentage, float entryPrice, float risk, float takeProfitPrice) =>
    idTrade = str.tostring(magic)
    stopLossPrice = calculateStopLossForLong(entryPrice, risk)
    if strategy.equity > 0 and  positionSize(entryPrice, stopLossPrice, riskPercentage) <= 100000000000
        strategy.entry(id = idTrade, direction = strategy.long, comment = idTrade, qty = positionSize(entryPrice, stopLossPrice, riskPercentage), alert_message = entryLongAlertMessage(licenseId, idTrade, strategyId, ticker, math.abs(entryPrice - stopLossPrice), rewardratio, entryPrice, stopLossPrice, takeProfitPrice))
        strategy.exit(idTrade, from_entry = idTrade, comment= str.tostring(positionSize(entryPrice, stopLossPrice, riskPercentage)), comment_loss=str.tostring("-1"), comment_profit = str.tostring(rewardratio), stop=stopLossPrice, limit=takeProfitPrice, alert_profit = tpHitAlertMessage(licenseId, idTrade, strategyId, ticker, rewardratio), alert_loss = slHitAlertMessage(licenseId, idTrade, strategyId, ticker))
        alert(buyAlertMessage(licenseId, idTrade, strategyId, ticker, risk, rewardratio, entryPrice), freq = alert.freq_once_per_bar_close) 

export buyStop(string licenseId,int magic, string ticker, int strategyId, float rewardratio, float riskPercentage, float entryPrice, string entryExpression, float risk, string stopLossExpression) =>
    stopLossPrice = calculateStopLossForLong(entryPrice, risk)
    takeProfitPrice = calculateTakeProfitForLong(entryPrice, stopLossPrice, rewardratio)
    idTrade = str.tostring(magic)
    if strategy.equity > 0 and  positionSize(entryPrice, stopLossPrice, riskPercentage) <= 100000000000
        strategy.entry(id = idTrade, direction = strategy.long, comment = idTrade, stop = entryPrice, qty = positionSize(entryPrice, stopLossPrice, riskPercentage), alert_message = entryLongAlertMessage(licenseId, idTrade, strategyId, ticker, risk, rewardratio, entryPrice, stopLossPrice, takeProfitPrice))
        strategy.exit(idTrade, from_entry = idTrade, comment= str.tostring(positionSize(entryPrice, stopLossPrice, riskPercentage)), comment_loss=str.tostring("-1"), comment_profit = str.tostring(rewardratio), stop=stopLossPrice, limit=takeProfitPrice, alert_profit = tpHitAlertMessage(licenseId, idTrade, strategyId, ticker, rewardratio), alert_loss = slHitAlertMessage(licenseId, idTrade, strategyId, ticker))
        alert(buyStopAlertMessage(licenseId, idTrade, strategyId, ticker, risk, rewardratio,entryPrice, entryExpression, stopLossExpression), freq = alert.freq_once_per_bar_close) 

export sell(string licenseId, int magic, string ticker, int strategyId, float rewardratio, float riskPercentage, float entryPrice, float risk, float takeProfitPrice) =>
    idTrade = str.tostring(magic)
    stopLossPrice =  calculateStopLossForShort(entryPrice, risk)
    if strategy.equity > 0 and  positionSize(entryPrice, stopLossPrice, riskPercentage) <= 100000000000
        strategy.entry(id = idTrade, direction = strategy.short, comment = idTrade, qty = positionSize(entryPrice, stopLossPrice, riskPercentage), alert_message = entryShortAlertMessage(licenseId, idTrade, strategyId, ticker, math.abs(entryPrice - stopLossPrice), rewardratio, entryPrice, stopLossPrice, takeProfitPrice))
        strategy.exit(idTrade, from_entry = idTrade, comment= str.tostring(positionSize(entryPrice, stopLossPrice, riskPercentage)), comment_loss=str.tostring("-1"), comment_profit = str.tostring(rewardratio), stop=stopLossPrice, limit=takeProfitPrice, alert_profit = tpHitAlertMessage(licenseId, idTrade, strategyId, ticker, rewardratio), alert_loss = slHitAlertMessage(licenseId, idTrade, strategyId, ticker))
        alert(sellAlertMessage(licenseId, idTrade, strategyId, ticker, risk, rewardratio, entryPrice), freq = alert.freq_once_per_bar_close) 

export sellStop(string licenseId, int magic, string ticker, int strategyId, float rewardratio, float riskPercentage, float entryPrice, string entryExpression, float risk, string stopLossExpression) =>
    stopLossPrice = calculateStopLossForShort(entryPrice, risk)
    takeProfitPrice = calculateTakeProfitForShort(entryPrice, stopLossPrice, rewardratio)
    idTrade = str.tostring(magic)
    if strategy.equity > 0 and  positionSize(entryPrice, stopLossPrice, riskPercentage) <= 100000000000
        strategy.entry(id = idTrade, direction = strategy.short, comment = idTrade, stop = entryPrice, qty = positionSize(entryPrice, stopLossPrice, riskPercentage), alert_message = entryShortAlertMessage(licenseId, idTrade, strategyId, ticker, risk, rewardratio, entryPrice, stopLossPrice, takeProfitPrice))
        strategy.exit(idTrade, from_entry = idTrade, comment= str.tostring(positionSize(entryPrice, stopLossPrice, riskPercentage)), comment_loss=str.tostring("-1"), comment_profit = str.tostring(rewardratio), stop=stopLossPrice, limit=takeProfitPrice, alert_profit = tpHitAlertMessage(licenseId, idTrade, strategyId, ticker, rewardratio), alert_loss = slHitAlertMessage(licenseId, idTrade, strategyId, ticker))
        alert(sellStopAlertMessage(licenseId, idTrade, strategyId, ticker, risk, rewardratio,entryPrice, entryExpression, stopLossExpression), freq = alert.freq_once_per_bar_close) 



export cancelOrder(string licenseId, int magic, string ticker, int strategyId) =>
    idTrade = str.tostring(magic)
    alert(message = cancelAlertMessage(licenseId, strategyId, ticker), freq = alert.freq_once_per_bar_close)
    strategy.cancel(idTrade)
	
export closeOrder(string licenseId, int magic, string ticker, int strategyId, float closeRewardRatio) =>
    idTrade = str.tostring(magic)
    alert(message = closeAlertMessage(licenseId, idTrade, strategyId, ticker, closeRewardRatio), freq = alert.freq_once_per_bar_close)
    strategy.close(idTrade, comment=str.tostring(closeRewardRatio, "#.##"), disable_alert = true)
	
export closeAllOrders(string licenseId, int magic, string ticker, int strategyId, float closeRewardRatio) =>
    idTrade = str.tostring(magic)
    strategy.close_all(comment = str.tostring(closeRewardRatio), alert_message = closeAllAlertMessage(licenseId, idTrade, strategyId, ticker, closeRewardRatio))

export moveSlToBe(string licenseId, int magic, string ticker, int strategyId, float rewardratio, float entryPrice, string entryExpression, float takeProfitPrice) =>
    idTrade = str.tostring(magic)
    alert(message = moveSlToBeAlertMessage(licenseId, idTrade, strategyId, ticker, entryExpression), freq = alert.freq_once_per_bar_close)
    strategy.exit(idTrade, from_entry = idTrade, comment = idTrade, comment_loss= str.tostring("0"), comment_profit = str.tostring(rewardratio), stop = entryPrice, limit=takeProfitPrice, alert_loss = beHitAlertMessage(licenseId, idTrade, strategyId, ticker))
