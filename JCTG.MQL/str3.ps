//@version=5
strategy("STR3.5", overlay=true, process_orders_on_close = true, calc_on_every_tick = true, default_qty_type = strategy.percent_of_equity, default_qty_value = 100, pyramiding = 100, currency = currency.NONE, initial_capital = 10000000, close_entries_rule="ANY")
import TradingView/ta/5
import Jury_P/Tradehubler/1 as th

//INPUTS
i_showStrategy              = input.bool(true,title="Show Strategy",group = "General") 
i_showRiskReward            = input.bool(true,title="Show Risk/Reward Area",group = "General") 
i_takeLongOrShort           = input.string("Long", title="Direction",group = "General", options = ["Long", "Short"])

i_pyramiding                = input.bool(false,title = "Pyramiding?", group = "Risk / Reward")
i_rewardRatio               = input.float(5.0, title = "Reward Ratio", group = "Risk / Reward") 
i_moveSLtoBEafterR          = input.float(1.0, title="Move SL to BE after xR",group = "Risk / Reward") 
i_cancellimit               = input.int(0, title = "Cancel stop order after (x) bars", group = "Risk / Reward") 
i_thresholdPct              = input.float(50.00, title="Treshold average percentage OB", minval=0, maxval=1000,group = "Risk / Reward") 
i_minRisk                   = input.float(5.00, title="Min risk between entry and SL", minval=0, maxval=100,group = "Risk / Reward") 
i_cancellimitNewSignal      = input.bool(true, title="Cancel stop order when new signal",group = "Risk / Reward") 

i_pcLicenseID               = input.string("692803787",title="License ID",group = "Account")
i_strategyID                = input.int(3,title="Strategy ID",group = "Account")


//VARS
var int magic = 0
var float TP = na, var float SL = na, var float EP = na
var float risk = na
var int orderBar = na

// Variables to accumulate highs and count bars
var float sumSignalCandle = 0.0
var int countSignalCandle = 0


//FUNCTIONS
bullishOutsideBar() => 
    close > high[1] and low < low[1] and high[1] - low[1] > 1

bearishOutsideBar() => 
    close < low[1] and high > high[1] and high[1] - low[1] > 1

isSignalCandle() => 
    if  i_pyramiding or strategy.position_size == 0
        i_takeLongOrShort == "Long" ? bearishOutsideBar()  : bullishOutsideBar()
    else
        false


// Accumulate highs and count for bullish outside bars
if isSignalCandle()
    sumSignalCandle := sumSignalCandle + math.abs(high - low)
    countSignalCandle := countSignalCandle + 1

avgSignalCandle = countSignalCandle > 0 ? sumSignalCandle / countSignalCandle : na


isHighAboveAverage() =>
    i_thresholdPct > 0 ? math.abs(high - low) >= avgSignalCandle * (i_thresholdPct / 100.00) : true


//long
if isSignalCandle() and isHighAboveAverage() and i_takeLongOrShort == "Long" and barstate.isconfirmed
    ep = low[1]
    sl = ep - (high - ep)
    r = ep - sl

    if r > i_minRisk
        EP := ep
        SL := sl
        risk := r

        if i_cancellimitNewSignal
            th.cancelOrder(i_pcLicenseID, th.magicAsString(magic), 3)
        magic := th.magic()
        TP := th.calculateTakeProfitForLong(EP, SL, i_rewardRatio)
        if i_cancellimit > 0
            orderBar := bar_index

        // Do entry
        th.buyStop(i_pcLicenseID, th.magicAsString(magic), i_strategyID, i_rewardRatio, 1, EP, 'Bar[' + str.tostring(time[1]) + '].Low', SL, TP)


if i_takeLongOrShort == "Long" and strategy.position_size > 0 and EP != SL and i_moveSLtoBEafterR > 0 and close >= (EP + (i_moveSLtoBEafterR * risk)) and barstate.isconfirmed
    SL := EP
    th.moveSlToBe(i_pcLicenseID, th.magicAsString(magic), i_strategyID, i_rewardRatio, SL, TP)

// Short    
if isSignalCandle() and isHighAboveAverage() and i_takeLongOrShort == "Short" and barstate.isconfirmed
    ep = high[1]
    sl = ep + (ep - low)
    r = sl - ep

    if r > i_minRisk
        EP := ep
        SL := sl
        risk := r

        if i_cancellimitNewSignal
            th.cancelOrder(i_pcLicenseID, th.magicAsString(magic), 3)
        magic := th.magic()

        TP := th.calculateTakeProfitForShort(EP, SL, i_rewardRatio)
        if i_cancellimit > 0
            orderBar := bar_index

        th.sellStop(i_pcLicenseID, th.magicAsString(magic), i_strategyID, i_rewardRatio, 1, EP, 'Bar[' + str.tostring(time[1]) + '].High', SL, TP)


if i_takeLongOrShort == "Short" and strategy.position_size < 0 and EP != SL and i_moveSLtoBEafterR > 0 and close <= (EP - (i_moveSLtoBEafterR * risk)) and barstate.isconfirmed
    SL := EP
    th.moveSlToBe(i_pcLicenseID, th.magicAsString(magic), i_strategyID, i_rewardRatio, SL, TP)

//PLOTS
barcolor(isSignalCandle() ? color.blue  : na, title = "Signal Candle")
plotshape(isSignalCandle(), style=shape.xcross, color = color.black, title = "Signal Candle")

L1 = plot(i_showRiskReward and strategy.position_size > 0 ? EP : na, color=color.black, linewidth=1, style=plot.style_linebr, title="Long Entry Price")
L2 = plot(i_showRiskReward and strategy.position_size > 0 ? SL : na , color=color.red, linewidth=1, style=plot.style_linebr, title="Long Stop-Loss Price")
L3 = plot(i_showRiskReward and strategy.position_size > 0 ? TP : na, color=color.green, linewidth=1, style=plot.style_linebr, title="Long Take-Profit Price")
fill(L1,L2,color=color.new(color.red,90))
fill(L1,L3,color=color.new(color.green,90)) 

S1 = plot(i_showRiskReward and strategy.position_size < 0 ? EP : na, color=color.black, linewidth=1, style=plot.style_linebr, title="Short Entry Price")
S2 = plot(i_showRiskReward and strategy.position_size < 0 ? SL : na , color=color.red, linewidth=1, style=plot.style_linebr, title="Short Stop-Loss Price")
S3 = plot(i_showRiskReward and strategy.position_size < 0 ? TP : na, color=color.green, linewidth=1, style=plot.style_linebr, title="Short Take-Profit Price")
fill(S1,S2,color=color.new(color.red,90))
fill(S1,S3,color=color.new(color.green,90)) 

var table nameDisplay = table.new(position.middle_center, 1, 1, bgcolor = color.white, frame_width = 0)
if barstate.islast and math.round(strategy.equity,0) <= 0
    table.cell(nameDisplay, 0, 0, "Total Equity dropped below ZERO.\nThese parameters are not useful.",text_color=color.white, bgcolor=color.red)

