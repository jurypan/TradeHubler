//@version=5
strategy("STR1.2", overlay=true, process_orders_on_close = true, calc_on_every_tick = true, default_qty_type = strategy.percent_of_equity, default_qty_value = 100, pyramiding = 100, currency = currency.NONE, initial_capital = 10000000, close_entries_rule="ANY")
import TradingView/ta/5

//INPUTS
i_showStrategy              = input.bool(true,title="Show Strategy",group = "General") 
i_showRiskReward            = input.bool(true,title="Show Risk/Reward Area",group = "General") 
i_takeLongOrShort           = input.string("Long", title="Direction",group = "General", options = ["Long", "Short"])

i_pyramiding          = input.bool(false,title = "Pyramiding?", group = "Risk / Reward")
i_positionSize        = input.string("Fixed 1%", title = "Position Size", options = ["Fixed 1%", "Compound 1%", "1 Unit", "Auto"], group = "Risk / Reward")
i_rewardRatio         = input.int(5, title = "Reward Ratio", group = "Risk / Reward") 
i_moveSLtoBEafterR    = input.int(1,title="Move SL to BE after xR",group = "Risk / Reward") 

i_pcLicenseID         = input.string("692803787",title="License ID",group = "Account")


//VARS
var int id = 0, var float priceSL = -1, var float priceTP = 0
var float longTP = na, var float longSL = na, var float longEntryPrice = na, var float longRisk = na
var float shortTP = na, var float shortSL = na, var float shortEntryPrice = na, var float shortRisk = na

// Get ATR's
atr5M = str.tostring(request.security(syminfo.tickerid, "5", ta.atr(14)))
atr15M = str.tostring(request.security(syminfo.tickerid, "15", ta.atr(14)))
atr1H = str.tostring(request.security(syminfo.tickerid, "60", ta.atr(14)))
atrD = str.tostring(request.security(syminfo.tickerid, "D", ta.atr(14)))


//FUNCTIONS
bullishOutsideBar() => 
    close > high[1] and low < low[1]

bearishOutsideBar() => 
    close < low[1] and high > high[1]

isSignalCandle() => 
    if  i_pyramiding or strategy.position_size == 0
        i_takeLongOrShort == "Long" ? bullishOutsideBar() : bearishOutsideBar()
    else
        false

idTrade() =>
	str.tostring(id)

roundUp(number, decimals) =>
    factor = math.pow(10, decimals)
    math.ceil(number * factor) / factor

positionSize(entryPrice, diff) =>
    float posSize = na
    if i_positionSize == "Fixed 1%"
        posSize := math.abs(roundUp(strategy.initial_capital *  0.01 / diff / syminfo.pointvalue, 2))
    else if i_positionSize == "Compound 1%"
        posSize := roundUp(strategy.equity *  0.01 / diff / syminfo.pointvalue, 2)
    else if i_positionSize == "1 Unit"
        posSize := 1



//LONG
if isSignalCandle() and i_takeLongOrShort == "Long" and barstate.isconfirmed
    id := id + 1
    longEntryPrice := close
    longSL := low
    longRisk := longEntryPrice - longSL
    longTP := longEntryPrice + (i_rewardRatio * longRisk)
    
    // Position Size
    positionSize = positionSize(longEntryPrice, longRisk)

    // Do entry
    strategy.entry(id = idTrade(), direction = strategy.long, comment = idTrade(), qty = positionSize)
    strategy.exit("EXIT" + idTrade(), from_entry =  idTrade(), comment= idTrade(), comment_loss=str.tostring("-1"), comment_profit = str.tostring(i_rewardRatio), stop=longSL, limit=longTP)
    alert(i_pcLicenseID + ',buy,' + syminfo.ticker + ',entryprice=' + str.tostring(longEntryPrice) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(longSL) + ',tp=' + str.tostring(longTP) + ',magic=' + idTrade() + ',strategytype=1,atr5M=' + atr5M + ',atr15M=' + atr15M + ',atr1H=' + atr1H + ',atrD=' + atrD, alert.freq_once_per_bar_close)


if i_takeLongOrShort == "Long" and strategy.position_size > 0 and longEntryPrice != longSL and i_moveSLtoBEafterR > 0 and close >= (longEntryPrice + (i_moveSLtoBEafterR * longRisk)) and barstate.isconfirmed
    strategy.exit("EXIT" + idTrade(), from_entry = idTrade(), comment = idTrade(), comment_loss= str.tostring("0"), comment_profit = str.tostring(i_rewardRatio), stop = longEntryPrice, limit=longTP) 
    alert(i_pcLicenseID + ',modifysltobe,' + syminfo.ticker + ',entryprice=' + str.tostring(close) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(longEntryPrice) + ',tp=' + str.tostring(longTP) + ',magic=' + idTrade() + ',strategytype=1,atr5M=' + atr5M + ',atr15M=' + atr15M + ',atr1H=' + atr1H + ',atrD=' + atrD, alert.freq_once_per_bar_close)
    longSL := longEntryPrice
    longRisk := 0.0
    

//SHORT
if isSignalCandle() and i_takeLongOrShort == "Short" and barstate.isconfirmed
    id := id + 1
    shortEntryPrice := close
    shortSL := high
    shortRisk := shortSL - shortEntryPrice
    shortTP := shortEntryPrice - (i_rewardRatio * (shortRisk))
        
    // Position Size
    positionSize = positionSize(shortEntryPrice, shortRisk)
    
    // Do entry
    strategy.entry(id = idTrade(), direction = strategy.short, comment = idTrade(), qty = positionSize)
    strategy.exit("EXIT" + idTrade(), from_entry =  idTrade(), comment= idTrade(), comment_loss=str.tostring("-1"), comment_profit = str.tostring(i_rewardRatio), stop=shortSL, limit=shortTP)
    alert(i_pcLicenseID + ',sell,' + syminfo.ticker + ',entryprice=' + str.tostring(shortEntryPrice) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(shortSL) + ',tp=' + str.tostring(shortTP) + ',magic=' + idTrade() + ',strategytype=1,atr5M=' + atr5M + ',atr15M=' + atr15M + ',atr1H=' + atr1H + ',atrD=' + atrD, alert.freq_once_per_bar_close)


if i_takeLongOrShort == "Short" and strategy.position_size < 0 and shortEntryPrice != shortSL and i_moveSLtoBEafterR > 0 and close <= (shortEntryPrice - (i_moveSLtoBEafterR * shortRisk)) and barstate.isconfirmed
    strategy.exit("EXIT" + idTrade(), from_entry = idTrade(), comment = idTrade(), comment_loss= str.tostring("0"), comment_profit = str.tostring(i_rewardRatio), stop = shortEntryPrice, limit=shortTP) 
    alert(i_pcLicenseID + ',modifysltobe,' + syminfo.ticker + ',entryprice=' + str.tostring(close) + ',currentprice=' + str.tostring(close) + ',sl=' + str.tostring(shortEntryPrice) + ',tp=' + str.tostring(shortTP) + ',magic=' + idTrade() + ',strategytype=1,atr5M=' + atr5M + ',atr15M=' + atr15M + ',atr1H=' + atr1H + ',atrD=' + atrD, alert.freq_once_per_bar_close)
    shortSL := shortEntryPrice
    shortRisk := 0.0
    

//PLOTS
plotshape(isSignalCandle() and not i_showStrategy, title= "OB", location=location.abovebar, color=color.black, textcolor = color.black, style=shape.arrowdown, text= "OB")
barcolor(isSignalCandle() ? color.black : na, title = "Signal Candle")
plotshape(isSignalCandle(), style=shape.xcross, color = color.black, title = "Signal Candle")
bgcolor(isSignalCandle() ? color.new(#660990, 95) : na, title = "Signal Candle")

L1 = plot(i_showRiskReward and strategy.position_size > 0 ? longEntryPrice : na, color=color.green, linewidth=1, style=plot.style_linebr, title="Long Entry Price")
L2 = plot(i_showRiskReward and strategy.position_size > 0 ? longSL : na , color=color.red, linewidth=1, style=plot.style_linebr, title="Long Stop-Loss Price")
L3 = plot(i_showRiskReward and strategy.position_size > 0 ? longTP : na, color=color.green, linewidth=1, style=plot.style_linebr, title="Long Take-Profit Price")
fill(L1,L2,color=color.new(color.red,90))
fill(L1,L3,color=color.new(color.green,90)) 

S1 = plot(i_showRiskReward and strategy.position_size < 0 ? shortEntryPrice : na, color=color.green, linewidth=1, style=plot.style_linebr, title="Short Entry Price")
S2 = plot(i_showRiskReward and strategy.position_size < 0 ? shortSL : na , color=color.red, linewidth=1, style=plot.style_linebr, title="Short Stop-Loss Price")
S3 = plot(i_showRiskReward and strategy.position_size < 0 ? shortTP : na, color=color.green, linewidth=1, style=plot.style_linebr, title="Short Take-Profit Price")
fill(S1,S2,color=color.new(color.red,90))
fill(S1,S3,color=color.new(color.green,90)) 


var table nameDisplay = table.new(position.middle_center, 1, 1, bgcolor = color.white, frame_width = 0)
if barstate.islast and math.round(strategy.equity,0) <= 0
    table.cell(nameDisplay, 0, 0, "Total Equity dropped below ZERO.\nThese parameters are not useful.",text_color=color.white, bgcolor=color.red)

